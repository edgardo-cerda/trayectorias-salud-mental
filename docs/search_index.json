[["index.html", "Trayectorias de sintomatología depresiva Cargar y preparar datos ELSOC 0.1 Cargar librerías", " Trayectorias de sintomatología depresiva Álvaro Jiménez, Fabián Duarte, Edgardo Cerda Cargar y preparar datos ELSOC 0.1 Cargar librerías # Librerías básicas library(tidyverse) library(sjlabelled) # Librerias análisis de secuencia library(TraMineR) library(TraMineRextras) library(WeightedCluster) library(cluster) # Librería ELSOC library(elsoc) # Librerias graficos library(ggpubr) library(ggsankey) library(shiny) library(plotly) # Libreria analisis estadístico library(nnet) library(modelsummary) library(lcmm) # Cargar datos ELSOC: elsoc::load_elsoc(data = &#39;wide&#39;) # Crear variables de sintomatología depresiva por ola: elsoc_salud &lt;- elsoc_wide_2016_2021 %&gt;% # Se conservan observaciones presentes en las 5 olas filter(tipo_atricion == 1) %&gt;% # Crear variables de PHQ9 purrr::map_at(.at = vars(starts_with(&#39;s11_0&#39;)), .f = function(s) car::recode(s, &quot;1 = 0; 2 = 1; 3 = 2; c(4, 5) = 3; c(-888, -999) = NA&quot;)) %&gt;% as.data.frame() %&gt;% mutate(phq9_w01 = (s11_01_w01 + s11_02_w01 + s11_03_w01 + s11_04_w01 + s11_05_w01 + s11_06_w01 + s11_07_w01 + s11_08_w01 + s11_09_w01), phq9_w02 = (s11_01_w02 + s11_02_w02 + s11_03_w02 + s11_04_w02 + s11_05_w02 + s11_06_w02 + s11_07_w02 + s11_08_w02 + s11_09_w02), phq9_w03 = (s11_01_w03 + s11_02_w03 + s11_03_w03 + s11_04_w03 + s11_05_w03 + s11_06_w03 + s11_07_w03 + s11_08_w03 + s11_09_w03), phq9_w04 = (s11_01_w04 + s11_02_w04 + s11_03_w04 + s11_04_w04 + s11_05_w04 + s11_06_w04 + s11_07_w04 + s11_08_w04 + s11_09_w04), phq9_w05 = (s11_01_w05 + s11_02_w05 + s11_03_w05 + s11_04_w05 + s11_05_w05 + s11_06_w05 + s11_07_w05 + s11_08_w05 + s11_09_w05)) %&gt;% # Quitar NAs filter(!is.na(phq9_w01), !is.na(phq9_w02), !is.na(phq9_w03), !is.na(phq9_w04), !is.na(phq9_w05)) %&gt;% # Crear indicador de depresión en 4 y en 2 categorías: mutate(depr4_w01 = car::recode(phq9_w01, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr4_w02 = car::recode(phq9_w02, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr4_w03 = car::recode(phq9_w03, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr4_w04 = car::recode(phq9_w04, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr4_w05 = car::recode(phq9_w05, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr2_w01 = car::recode(phq9_w01, &quot;0:9 = 0; 10:27 = 1&quot;), depr2_w02 = car::recode(phq9_w02, &quot;0:9 = 0; 10:27 = 1&quot;), depr2_w03 = car::recode(phq9_w03, &quot;0:9 = 0; 10:27 = 1&quot;), depr2_w04 = car::recode(phq9_w04, &quot;0:9 = 0; 10:27 = 1&quot;), depr2_w05 = car::recode(phq9_w05, &quot;0:9 = 0; 10:27 = 1&quot;), phq_sum = depr4_w01 + depr4_w02 + depr4_w03 + depr4_w04 + depr4_w05 ) # Cargar datos ELSOC LONG: elsoc::load_elsoc(data = &#39;long&#39;) # Crear variables de sintomatología depresiva por ola LONG: elsoc_salud_long &lt;- elsoc_long_2016_2021 %&gt;% # Se conservan observaciones presentes en las 5 olas filter(tipo_atricion == 1) %&gt;% # Crear variables de PHQ9 purrr::map_at(.at = vars(starts_with(&#39;s11_0&#39;)), .f = function(s) car::recode(s, &quot;1 = 0; 2 = 1; 3 = 2; c(4, 5) = 3; c(-888, -999) = NA&quot;)) %&gt;% as.data.frame() %&gt;% mutate(phq9 = (s11_01 + s11_02 + s11_03 + s11_04 + s11_05 + s11_06 + s11_07 + s11_08 + s11_09)) %&gt;% # Quitar NAs filter(!is.na(phq9)) %&gt;% # Crear indicador de depresión en 4 y en 2 categorías: mutate(depr4 = car::recode(phq9, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr2 = car::recode(phq9, &quot;0:9 = 0; 10:27 = 1&quot;)) "],["trayectorias-de-sintomatología-depresiva.-modelo-optimal-matching.html", "Capítulo 1 Trayectorias de sintomatología depresiva. Modelo Optimal-Matching 1.1 Secuencia de depresión con 4 categorías: 1.2 Secuencia de depresión con 2 categorías", " Capítulo 1 Trayectorias de sintomatología depresiva. Modelo Optimal-Matching 1.1 Secuencia de depresión con 4 categorías: # Crear objeto con secuencias seq.depr4 &lt;- TraMineR::seqdef(elsoc_salud, var = c(&#39;depr4_w01&#39;, &#39;depr4_w02&#39;, &#39;depr4_w03&#39;, &#39;depr4_w04&#39;, &#39;depr4_w05&#39;), states = c(&#39;Sin síntomas&#39;, &#39;Síntomas medios&#39;, &#39;Síntomas moderados&#39;, &#39;Síntomas severos&#39;), labels = c(&#39;Sin síntomas&#39;, &#39;Síntomas medios&#39;, &#39;Sintomas moderados&#39;, &#39;Síntomas severos&#39;), weights = elsoc_salud$ponderador02_w01, cpal = c(&#39;lightgreen&#39;, &#39;mediumturquoise&#39;, &#39;skyblue3&#39;, &#39;slateblue4&#39;)) 1.1.1 Gráfico de secuencias: Muestra todas las secuencias, ordenadas según la suma total del indice phq9 (sumando las 5 olas) TraMineR::seqIplot(seq.depr4, border = NA, xtlab = c(2016:2019, 2021), space = 0, sortv = elsoc_salud$phq_sum) 1.1.2 Frecuencia de estados y transiciones seqstatd(seq.depr4) ## [State frequencies] ## depr4_w01 depr4_w02 depr4_w03 depr4_w04 depr4_w05 ## Sin síntomas 0.480 0.49 0.44 0.37 0.496 ## Síntomas medios 0.303 0.30 0.32 0.38 0.297 ## Síntomas moderados 0.145 0.11 0.14 0.15 0.118 ## Síntomas severos 0.072 0.10 0.10 0.10 0.089 ## ## [Valid states] ## depr4_w01 depr4_w02 depr4_w03 depr4_w04 depr4_w05 ## N 1387 1387 1387 1387 1387 ## ## [Entropy index] ## depr4_w01 depr4_w02 depr4_w03 depr4_w04 depr4_w05 ## H 0.85 0.86 0.89 0.9 0.85 seqtrate(seq.depr4) ## [-&gt; Sin síntomas] [-&gt; Síntomas medios] ## [Sin síntomas -&gt;] 0.6315011 0.2732770 ## [Síntomas medios -&gt;] 0.3831385 0.4058737 ## [Síntomas moderados -&gt;] 0.1763785 0.3718435 ## [Síntomas severos -&gt;] 0.1974423 0.2106458 ## [-&gt; Síntomas moderados] [-&gt; Síntomas severos] ## [Sin síntomas -&gt;] 0.05812547 0.03709645 ## [Síntomas medios -&gt;] 0.14048374 0.07050413 ## [Síntomas moderados -&gt;] 0.24994502 0.20183294 ## [Síntomas severos -&gt;] 0.25802652 0.33388539 1.1.3 Clusters de secuencias: # Medir distancias entre secuencias usando analisis de secuencias usando optimal matching analysis # Se define matriz de costos de sustitución basados en valores medios de indice phq9 substitution_cost_matrix &lt;- as.matrix(rbind(c(0, 5, 10, 19), c(5, 0, 5, 14), c(10, 5, 0, 9), c(19, 14, 9, 0))) dist.depr4 &lt;- TraMineR::seqdist(seq.depr4, method = &quot;OM&quot;, sm = substitution_cost_matrix) # Construir tipos de trayectorias con analisis de cluster jerarquico Ward ward.depr4 &lt;- cluster::agnes(dist.depr4, diss = TRUE, method = &#39;ward&#39;) Indicadores de calidad de partición: Se evalúa según los indicadores: kableExtra::kbl(data.frame(indicador = c(&#39;Point Biserial Correlation&#39;, &quot;Hubert&#39;s Somers&#39; D&quot;, &quot;Hubert&#39;s C&quot;, &quot;Average Silhouette Width (weighted)&quot;), abreviacion = c(&#39;PBC&#39;, &#39;HGSD&#39;, &#39;HC&#39;, &#39;ASWw&#39;), interpretacion = c(&#39;Mide la capacidad de la clusterización de reproducir las distancias&#39;, &#39;Mide la capacidad de la clusterización de reproducir las distancias tomando en cuenta empates en distancias&#39;, &#39;Mide la brecha entre la clusterización obtenida y la mejor partición teóricamente posible con este número de grupos y distancias&#39;, &#39;Mide la coherencia de asignaciones. Alta coherencia indica una alta distancia entre grupos y fuerte homogeneidad inter-grupal&#39;))) indicador abreviacion interpretacion Point Biserial Correlation PBC Mide la capacidad de la clusterización de reproducir las distancias Huberts Somers D HGSD Mide la capacidad de la clusterización de reproducir las distancias tomando en cuenta empates en distancias Huberts C HC Mide la brecha entre la clusterización obtenida y la mejor partición teóricamente posible con este número de grupos y distancias Average Silhouette Width (weighted) ASWw Mide la coherencia de asignaciones. Alta coherencia indica una alta distancia entre grupos y fuerte homogeneidad inter-grupal # Comparar soluciones con diferentes numeros de trayectorias (se prueban de 2 a 10 clusters) ward.range.depr4 &lt;- WeightedCluster::as.clustrange(ward.depr4, diss = dist.depr4, ncluster = 10) # Visualizar clusters: ward.range.depr4$stats %&gt;% mutate(clusters = 2:10) %&gt;% pivot_longer(cols = c(ASWw, HG, PBC, HC), names_to = &#39;indicador&#39;, values_to = &#39;value&#39;) %&gt;% group_by(indicador) %&gt;% mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %&gt;% ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) + geom_line() + scale_x_continuous(breaks = 2:10) Para ASWw, HG y PBC, mientras más alto el valor indica una mejor calidad en la partición. Para HC mientras más bajo es mejor. Los mejores valores parecen estar entre 4 y 5 clusters. 1.1.4 Graficos de secuencias por clusters Pruebas con 4-5 clusters TraMineR::seqfplot(seq.depr4, group = stats::cutree(ward.depr4, k = 4), border = NA, space = 0, idxs = 0, xtlab = c(2016:2019, 2021)) TraMineR::seqdplot(seq.depr4, group = stats::cutree(ward.depr4, k = 4), border = NA, space = 0) TraMineR::seqfplot(seq.depr4, group = stats::cutree(ward.depr4, k = 5), border = NA, space = 0, idxs = 0, xtlab = c(2016:2019, 2021)) TraMineR::seqdplot(seq.depr4, group = stats::cutree(ward.depr4, k = 5), border = NA, space = 0) 1.1.5 Opción preferida: 5 clusters Me gusta la opción con 5 clusters. Nombres provisorios: - Trayectoria alta/moderada - Trayectoria descendente - Trayectoria ascendente - Trayectoria media/moderada - Trayectoria baja/media seq.depr4$cluster &lt;- factor(stats::cutree(ward.depr4, k = 5), levels = 1:5, labels = c(&#39;Trayectoria alta/moderada&#39;, &#39;Trayectoria descendente&#39;, &#39;Trayectoria ascendente&#39;, &#39;Trayectoria media/moderada&#39;, &#39;Trayectoria baja/media&#39;)) TraMineR::seqfplot(seq.depr4, group = seq.depr4$cluster, border = NA, space = 0, idxs = 0, xtlab = c(2016:2019, 2021)) TraMineR::seqdplot(seq.depr4, group = seq.depr4$cluster, border = NA, space = 0, xtlab = c(2016:2019, 2021)) 1.2 Secuencia de depresión con 2 categorías # Crear objeto con secuencias seq.depr2 &lt;- TraMineR::seqdef(elsoc_salud, var = c(&#39;depr2_w01&#39;, &#39;depr2_w02&#39;, &#39;depr2_w03&#39;, &#39;depr2_w04&#39;, &#39;depr2_w05&#39;), states = c(&#39;Sin síntomas/sintomas medios&#39;, &#39;sintomas moderados/severos&#39;), labels = c(&#39;Sin/medios&#39;, &#39;Moderados/Severos&#39;), weights = elsoc_salud$ponderador02_w01, cpal = c(&#39;lightgreen&#39;, &#39;slateblue4&#39;)) 1.2.1 Gráfico de secuencias: Hay 32 secuencias en total TraMineR::seqIplot(seq.depr2, border = NA, xtlab = c(2016:2019, 2021), space = 0, sortv = elsoc_salud$phq_sum) 1.2.2 Clusters de secuencias: dist.depr2 &lt;- TraMineR::seqdist(seq.depr2, method = &quot;OM&quot;, sm = &#39;CONSTANT&#39;) # Construir tipos de trayectorias con analisis de cluster jerarquico Ward ward.depr2 &lt;- cluster::agnes(dist.depr2, diss = TRUE, method = &#39;ward&#39;) # Comparar soluciones con diferentes numeros de trayectorias (se prueban de 2 a 10 clusters) ward.range.depr2 &lt;- WeightedCluster::as.clustrange(ward.depr2, diss = dist.depr2, ncluster = 10) # Visualizar clusters: ward.range.depr2$stats %&gt;% mutate(clusters = 2:10) %&gt;% pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC), names_to = &#39;indicador&#39;, values_to = &#39;value&#39;) %&gt;% group_by(indicador) %&gt;% mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %&gt;% ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) + geom_line() + scale_x_continuous(breaks = 2:10) En este caso al parecer mientrás más clusters es mejor. 1.2.3 Gráficos de secuencia por clusters Pruebas con 4-7 clusters TraMineR::seqfplot(seq.depr2, group = stats::cutree(ward.depr2, k = 4), border = NA, space = 0, idxs = 0, xtlab = c(2016:2019, 2021)) TraMineR::seqdplot(seq.depr2, group = stats::cutree(ward.depr2, k = 4), border = NA, space = 0) TraMineR::seqfplot(seq.depr2, group = stats::cutree(ward.depr2, k = 5), border = NA, space = 0, idxs = 0, xtlab = c(2016:2019, 2021)) TraMineR::seqdplot(seq.depr2, group = stats::cutree(ward.depr2, k = 5), border = NA, space = 0) TraMineR::seqfplot(seq.depr2, group = stats::cutree(ward.depr2, k = 6), border = NA, space = 0, idxs = 0, xtlab = c(2016:2019, 2021)) TraMineR::seqdplot(seq.depr2, group = stats::cutree(ward.depr2, k = 6), border = NA, space = 0) TraMineR::seqfplot(seq.depr2, group = stats::cutree(ward.depr2, k = 7), border = NA, space = 0, idxs = 0, xtlab = c(2016:2019, 2021)) TraMineR::seqdplot(seq.depr2, group = stats::cutree(ward.depr2, k = 7), border = NA, space = 0) "],["trayectorias-de-sintomatologia-depresiva.-modelo-latent-class-mixed-model-lcmm.html", "Capítulo 2 Trayectorias de sintomatologia depresiva. Modelo Latent Class Mixed Model (LCMM) 2.1 Identificar trayectorias: 2.2 Principales trayectorias", " Capítulo 2 Trayectorias de sintomatologia depresiva. Modelo Latent Class Mixed Model (LCMM) set.seed(123) 2.1 Identificar trayectorias: Modelos de trayectorias lineales: Se usa el modelo de 1 clase para fijar los valores iniciales a iterar: lcmm1_lin &lt;- hlme(phq9 ~ ola, subject = &quot;idencuesta&quot;, ng = 1, data = elsoc_salud_long) lcmm2_lin &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_lin, hlme(phq9 ~ ola, mixture = ~ ola, subject = &quot;idencuesta&quot;, ng = 2, data = elsoc_salud_long)) lcmm3_lin &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_lin, hlme(phq9 ~ ola, mixture = ~ ola, subject = &quot;idencuesta&quot;, ng = 3, data = elsoc_salud_long)) lcmm4_lin &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_lin, hlme(phq9 ~ ola, mixture = ~ ola, subject = &quot;idencuesta&quot;, ng = 4, data = elsoc_salud_long)) lcmm5_lin &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_lin, hlme(phq9 ~ ola, mixture = ~ ola, subject = &quot;idencuesta&quot;, ng = 5, data = elsoc_salud_long)) Modelos de trayectorias cuadráticas: lcmm1_quad &lt;- hlme(phq9 ~ poly(ola, degree = 2, raw = TRUE), subject = &quot;idencuesta&quot;, ng = 1, data = elsoc_salud_long) lcmm2_quad &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_quad, hlme(phq9 ~ ola + I(ola^2), mixture = ~ ola + I(ola^2), subject = &quot;idencuesta&quot;, ng = 2, data = elsoc_salud_long)) lcmm3_quad &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_quad, hlme(phq9 ~ ola + I(ola^2), mixture = ~ ola + I(ola^2), subject = &quot;idencuesta&quot;, ng = 3, data = elsoc_salud_long)) lcmm4_quad &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_quad, hlme(phq9 ~ ola + I(ola^2), mixture = ~ ola + I(ola^2), subject = &quot;idencuesta&quot;, ng = 4, data = elsoc_salud_long)) lcmm5_quad &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_quad, hlme(phq9 ~ ola + I(ola^2), mixture = ~ ola + I(ola^2), subject = &quot;idencuesta&quot;, ng = 5, data = elsoc_salud_long)) Comparación resultados # Comparar resultados: resultados_comparados &lt;- summarytable(lcmm1_lin, lcmm1_quad, lcmm2_lin, lcmm2_quad, lcmm3_lin, lcmm3_lin, lcmm4_lin, lcmm4_quad, lcmm5_lin, lcmm5_quad) kableExtra::kbl(resultados_comparados[,1:4], digits = 1) G loglik npm BIC lcmm1_lin 1 -23116.6 3 46255.2 lcmm1_quad 1 -23106.8 4 46242.9 lcmm2_lin 2 -22296.7 6 44637.3 lcmm2_quad 2 -22280.3 8 44619.1 lcmm3_lin 3 -22169.6 9 44405.2 lcmm3_lin 3 -22169.6 9 44405.2 lcmm4_lin 4 -22096.3 12 44280.4 lcmm4_quad 4 -22074.0 16 44265.1 lcmm5_lin 5 -22065.5 15 44240.9 lcmm5_quad 5 -22042.1 20 44230.7 kableExtra::kbl(resultados_comparados[,5:9], digits = 1) %class1 %class2 %class3 %class4 %class5 lcmm1_lin 100.0 NA NA NA NA lcmm1_quad 100.0 NA NA NA NA lcmm2_lin 20.8 79.2 NA NA NA lcmm2_quad 79.1 20.9 NA NA NA lcmm3_lin 26.3 67.0 6.7 NA NA lcmm3_lin 26.3 67.0 6.7 NA NA lcmm4_lin 3.3 5.4 27.4 63.9 NA lcmm4_quad 3.7 27.9 63.2 5.2 NA lcmm5_lin 58.9 5.8 1.5 28.4 5.4 lcmm5_quad 1.7 6.0 27.4 5.4 59.6 2.2 Principales trayectorias Según criterios de información debería estar entre 4y 5 clases: summary(lcmm4_lin) ## Heterogenous linear mixed model ## fitted by maximum likelihood method ## ## hlme(fixed = phq9 ~ ola, mixture = ~ola, subject = &quot;idencuesta&quot;, ## ng = 4, data = elsoc_salud_long) ## ## Statistical Model: ## Dataset: elsoc_salud_long ## Number of subjects: 1513 ## Number of observations: 7451 ## Number of latent classes: 4 ## Number of parameters: 12 ## ## Iteration process: ## Convergence criteria satisfied ## Number of iterations: 9 ## Convergence criteria: parameters= 2.8e-05 ## : likelihood= 1.8e-05 ## : second derivatives= 1.1e-11 ## ## Goodness-of-fit statistics: ## maximum log-likelihood: -22096.25 ## AIC: 44216.51 ## BIC: 44280.37 ## ## ## Maximum Likelihood Estimates: ## ## Fixed effects in the class-membership model: ## (the class of reference is the last class) ## ## coef Se Wald p-value ## intercept class1 -2.85226 0.21766 -13.104 0.00000 ## intercept class2 -2.41393 0.16903 -14.281 0.00000 ## intercept class3 -0.79941 0.10137 -7.886 0.00000 ## ## Fixed effects in the longitudinal model: ## ## coef Se Wald p-value ## intercept class1 21.41747 1.03744 20.645 0.00000 ## intercept class2 8.69658 0.85057 10.224 0.00000 ## intercept class3 8.50963 0.38331 22.200 0.00000 ## intercept class4 3.43463 0.16907 20.315 0.00000 ## ola class1 -2.20170 0.31364 -7.020 0.00000 ## ola class2 1.90835 0.23287 8.195 0.00000 ## ola class3 0.05517 0.09942 0.555 0.57892 ## ola class4 0.16555 0.04702 3.521 0.00043 ## ## coef Se ## Residual standard error: 4.10416 0.03655 pred_lcmm4_lin &lt;- predictY(lcmm4_lin, data.frame(ola = 1:5)) plot(pred_lcmm4_lin, ylim = c(0, 27)) summary(lcmm4_quad) ## Heterogenous linear mixed model ## fitted by maximum likelihood method ## ## hlme(fixed = phq9 ~ ola + I(ola^2), mixture = ~ola + I(ola^2), ## subject = &quot;idencuesta&quot;, ng = 4, data = elsoc_salud_long) ## ## Statistical Model: ## Dataset: elsoc_salud_long ## Number of subjects: 1513 ## Number of observations: 7451 ## Number of latent classes: 4 ## Number of parameters: 16 ## ## Iteration process: ## Convergence criteria satisfied ## Number of iterations: 8 ## Convergence criteria: parameters= 3.4e-05 ## : likelihood= 3.5e-06 ## : second derivatives= 8.5e-12 ## ## Goodness-of-fit statistics: ## maximum log-likelihood: -22073.96 ## AIC: 44179.92 ## BIC: 44265.07 ## ## ## Maximum Likelihood Estimates: ## ## Fixed effects in the class-membership model: ## (the class of reference is the last class) ## ## coef Se Wald p-value ## intercept class1 -0.38807 0.26940 -1.441 0.14972 ## intercept class2 1.61827 0.16912 9.569 0.00000 ## intercept class3 2.40304 0.16591 14.484 0.00000 ## ## Fixed effects in the longitudinal model: ## ## coef Se Wald p-value ## intercept class1 16.53511 1.83099 9.031 0.00000 ## intercept class2 6.71471 0.59959 11.199 0.00000 ## intercept class3 2.72252 0.32149 8.468 0.00000 ## intercept class4 7.39445 1.32288 5.590 0.00000 ## ola class1 1.79551 1.29955 1.382 0.16708 ## ola class2 1.52408 0.43486 3.505 0.00046 ## ola class3 0.76515 0.24069 3.179 0.00148 ## ola class4 2.97858 1.01997 2.920 0.00350 ## I(ola^2) class1 -0.65557 0.20855 -3.143 0.00167 ## I(ola^2) class2 -0.24243 0.07147 -3.392 0.00069 ## I(ola^2) class3 -0.10045 0.03910 -2.569 0.01020 ## I(ola^2) class4 -0.17680 0.17006 -1.040 0.29851 ## ## coef Se ## Residual standard error: 4.08664 0.03647 pred_lcmm4_quad &lt;- predictY(lcmm4_quad, data.frame(ola = 1:5)) plot(pred_lcmm4_quad, ylim = c(0, 27)) summary(lcmm5_lin) ## Heterogenous linear mixed model ## fitted by maximum likelihood method ## ## hlme(fixed = phq9 ~ ola, mixture = ~ola, subject = &quot;idencuesta&quot;, ## ng = 5, data = elsoc_salud_long) ## ## Statistical Model: ## Dataset: elsoc_salud_long ## Number of subjects: 1513 ## Number of observations: 7451 ## Number of latent classes: 5 ## Number of parameters: 15 ## ## Iteration process: ## Convergence criteria satisfied ## Number of iterations: 27 ## Convergence criteria: parameters= 6.2e-08 ## : likelihood= 1.7e-05 ## : second derivatives= 1.2e-06 ## ## Goodness-of-fit statistics: ## maximum log-likelihood: -22065.54 ## AIC: 44161.07 ## BIC: 44240.9 ## ## ## Maximum Likelihood Estimates: ## ## Fixed effects in the class-membership model: ## (the class of reference is the last class) ## ## coef Se Wald p-value ## intercept class1 2.28422 0.14216 16.068 0.00000 ## intercept class2 -0.00482 0.05286 -0.091 0.92736 ## intercept class3 -1.30931 0.30349 -4.314 0.00002 ## intercept class4 1.56077 0.14705 10.614 0.00000 ## ## Fixed effects in the longitudinal model: ## ## coef Se Wald p-value ## intercept class1 3.35124 0.17966 18.653 0.00000 ## intercept class2 7.56736 0.76760 9.858 0.00000 ## intercept class3 21.63069 1.48875 14.529 0.00000 ## intercept class4 7.22559 0.39772 18.168 0.00000 ## intercept class5 17.11599 0.79157 21.623 0.00000 ## ola class1 0.13976 0.04901 2.852 0.00435 ## ola class2 2.02327 0.20284 9.975 0.00000 ## ola class3 -1.14989 0.44389 -2.590 0.00958 ## ola class4 0.23980 0.10214 2.348 0.01888 ## ola class5 -1.73989 0.21596 -8.056 0.00000 ## ## coef Se ## Residual standard error: 4.03786 0.03663 pred_lcmm5_lin &lt;- predictY(lcmm5_lin, data.frame(ola = 1:5)) plot(pred_lcmm5_lin, ylim = c(0, 27)) summary(lcmm5_quad) ## Heterogenous linear mixed model ## fitted by maximum likelihood method ## ## hlme(fixed = phq9 ~ ola + I(ola^2), mixture = ~ola + I(ola^2), ## subject = &quot;idencuesta&quot;, ng = 5, data = elsoc_salud_long) ## ## Statistical Model: ## Dataset: elsoc_salud_long ## Number of subjects: 1513 ## Number of observations: 7451 ## Number of latent classes: 5 ## Number of parameters: 20 ## ## Iteration process: ## Convergence criteria satisfied ## Number of iterations: 17 ## Convergence criteria: parameters= 3.7e-06 ## : likelihood= 7.6e-08 ## : second derivatives= 1.8e-12 ## ## Goodness-of-fit statistics: ## maximum log-likelihood: -22042.15 ## AIC: 44124.29 ## BIC: 44230.73 ## ## ## Maximum Likelihood Estimates: ## ## Fixed effects in the class-membership model: ## (the class of reference is the last class) ## ## coef Se Wald p-value ## intercept class1 -3.61274 0.36031 -10.027 0.00000 ## intercept class2 -2.27152 0.16487 -13.778 0.00000 ## intercept class3 -0.75827 0.13872 -5.466 0.00000 ## intercept class4 -2.25700 0.25639 -8.803 0.00000 ## ## Fixed effects in the longitudinal model: ## ## coef Se Wald p-value ## intercept class1 15.81498 2.75045 5.750 0.00000 ## intercept class2 6.39589 1.37661 4.646 0.00000 ## intercept class3 4.56692 1.00604 4.539 0.00001 ## intercept class4 17.45019 3.61552 4.826 0.00000 ## intercept class5 2.85852 0.33899 8.433 0.00000 ## ola class1 4.14382 1.96534 2.108 0.03499 ## ola class2 3.39563 1.06528 3.188 0.00143 ## ola class3 2.43558 0.82991 2.935 0.00334 ## ola class4 -2.36011 3.22500 -0.732 0.46428 ## ola class5 0.59085 0.25203 2.344 0.01906 ## I(ola^2) class1 -0.94830 0.33507 -2.830 0.00465 ## I(ola^2) class2 -0.24451 0.17866 -1.369 0.17112 ## I(ola^2) class3 -0.35386 0.13311 -2.658 0.00785 ## I(ola^2) class4 0.10307 0.52503 0.196 0.84436 ## I(ola^2) class5 -0.07683 0.04102 -1.873 0.06110 ## ## coef Se ## Residual standard error: 4.02135 0.03678 pred_lcmm5_quad &lt;- predictY(lcmm5_quad, data.frame(ola = 1:5)) plot(pred_lcmm5_quad, ylim = c(0, 27)) "],["variables-independientes.html", "Capítulo 3 Variables independientes 3.1 Preparar datos:", " Capítulo 3 Variables independientes 3.1 Preparar datos: Agregar variables de trayectoria de los distintos modelos: elsoc_salud$trayectoria_om4.5 &lt;- factor(stats::cutree(ward.depr4, k = 5), levels = c(5, 4, 2, 3, 1), labels = c(&#39;Trayectoria baja/media&#39;, &#39;Trayectoria media/moderada&#39;, &#39;Trayectoria descendente&#39;, &#39;Trayectoria ascendente&#39;, &#39;Trayectoria alta/moderada&#39;)) elsoc_salud$trayectoria_om2.3 &lt;- stats::cutree(ward.depr2, k = 3) elsoc_salud$trayectoria_gmm.4lin &lt;- factor(elsoc_salud %&gt;% left_join(lcmm4_lin$pprob %&gt;% select(idencuesta, class), by = &#39;idencuesta&#39;) %&gt;% pull(class), levels = c(4, 3, 1, 2), labels = c(&#39;Trayectoria baja&#39;, &#39;Trayectoria media&#39;, &#39;Trayectoria descendente&#39;, &#39;Trayectoria ascendente&#39;)) elsoc_salud$trayectoria_gmm.4quad &lt;- factor(elsoc_salud %&gt;% left_join(lcmm4_quad$pprob %&gt;% select(idencuesta, class), by = &#39;idencuesta&#39;) %&gt;% pull(class), levels = c(3, 2, 1, 4), labels = c(&#39;Trayectoria baja&#39;, &#39;Trayectoria media&#39;, &#39;Trayectoria descendente&#39;, &#39;Trayectoria ascendente&#39;)) elsoc_salud$trayectoria_gmm.5lin &lt;- elsoc_salud %&gt;% left_join(lcmm5_lin$pprob %&gt;% select(idencuesta, class), by = &#39;idencuesta&#39;) %&gt;% pull(class) elsoc_salud$trayectoria_gmm.5quad &lt;- elsoc_salud %&gt;% left_join(lcmm5_quad$pprob %&gt;% select(idencuesta, class), by = &#39;idencuesta&#39;) %&gt;% pull(class) Agregar variables independientes elsoc_salud_modelo &lt;- elsoc_salud %&gt;% filter(!elsoc::is_nsnr(m30_w01, m30_w02, m30_w03, m30_w04, m30b_w05)) %&gt;% mutate( # Variables de ingreso: m30_w01 = 1000*as.numeric(car::recode(m30_w01, &quot;1 = 220; 2 = 250; 3 = 305; 4 = 355; 5 = 400; 6 = 445; 7 = 490; 8 = 535; 9 = 585; 10 = 640; 11 = 700; 12 = 765; 13 = 845; 14 = 935; 15 = 1040; 16 = 1180; 17 = 1375; 18 = 1670; 19 = 2275; 20 = 2700; NA = NA&quot;)), m29_w01_imp = ifelse(is_nsnr(m29_w01), m30_w01, m29_w01), ypc_w01 = m29_w01_imp / nhogar1_w01, m30_w02 = 1000*as.numeric(car::recode(m30_w02, &quot;1 = 220; 2 = 250; 3 = 305; 4 = 355; 5 = 400; 6 = 445; 7 = 490; 8 = 535; 9 = 585; 10 = 640; 11 = 700; 12 = 765; 13 = 845; 14 = 935; 15 = 1040; 16 = 1180; 17 = 1375; 18 = 1670; 19 = 2275; 20 = 2700; NA = NA&quot;)), m29_w02_imp = ifelse(is_nsnr(m29_w02), m30_w02, m29_w02), ypc_w02 = m29_w02_imp / nhogar1_w01, m30_w03 = 1000*as.numeric(car::recode(m30_w03, &quot;1 = 220; 2 = 250; 3 = 305; 4 = 355; 5 = 400; 6 = 445; 7 = 490; 8 = 535; 9 = 585; 10 = 640; 11 = 700; 12 = 765; 13 = 845; 14 = 935; 15 = 1040; 16 = 1180; 17 = 1375; 18 = 1670; 19 = 2275; 20 = 2700; NA = NA&quot;)), m29_w03_imp = ifelse(is_nsnr(m29_w03), m30_w03, m29_w03), ypc_w03 = m29_w03_imp / ifelse(is_nsnr(m54_w03), NA, m54_w03), m30_w04 = 1000*as.numeric(car::recode(m30_w04, &quot;1 = 220; 2 = 250; 3 = 305; 4 = 355; 5 = 400; 6 = 445; 7 = 490; 8 = 535; 9 = 585; 10 = 640; 11 = 700; 12 = 765; 13 = 845; 14 = 935; 15 = 1040; 16 = 1180; 17 = 1375; 18 = 1670; 19 = 2275; 20 = 2700; NA = NA&quot;)), m29_w04_imp = ifelse(is_nsnr(m29_w04), m30_w04, m29_w04), ypc_w04 = m29_w04_imp / ifelse(is_nsnr(m54_w04), NA, m54_w04), m30b_w05 = 1000*as.numeric(car::recode(m30b_w05, &quot;1 = 225; 2 = 575; 3 = 850; 4 = 1250; 5 = 1750; NA = NA&quot;)), m29_w05_imp = ifelse(is_nsnr(m29_w05), m30b_w05, m29_w05), ypc_w05 = m29_w05_imp / ifelse(is_nsnr(m54_w05), NA, m54_w05), log_ing = log((ypc_w01 + ypc_w02 + ypc_w03 + ypc_w04 + ypc_w05)/5), quintil_w01 = statar::xtile(ypc_w01, n = 5, wt = ponderador02_w01), quintil_w01 = factor(quintil_w01, levels = 1:5, labels = glue::glue(&#39;Quintil {1:5}&#39;)), quintil_w02 = statar::xtile(ypc_w02, n = 5, wt = ponderador02_w02), quintil_w02 = factor(quintil_w02, levels = 1:5, labels = glue::glue(&#39;Quintil {1:5}&#39;)), quintil_w03 = statar::xtile(ypc_w03, n = 5, wt = ponderador02_w03), quintil_w03 = factor(quintil_w03, levels = 1:5, labels = glue::glue(&#39;Quintil {1:5}&#39;)), quintil_w04 = statar::xtile(ypc_w04, n = 5, wt = ponderador02_w04), quintil_w04 = factor(quintil_w04, levels = 1:5, labels = glue::glue(&#39;Quintil {1:5}&#39;)), quintil_w05 = statar::xtile(ypc_w05, n = 5, wt = ponderador02_w05), quintil_w05 = factor(quintil_w05, levels = 1:5, labels = glue::glue(&#39;Quintil {1:5}&#39;)), ocup_w01 = factor(car::recode(m02_w01, &quot;1:3 = 1; 6 = 2; c(4, 5, 7, 8, 9) = 3&quot;), levels = 1:3, labels = c(&#39;Ocupado&#39;, &#39;Desempleado&#39;, &#39;Inactivo&#39;)), ocup_w02 = factor(car::recode(m02_w02, &quot;1:3 = 1; 6 = 2; c(4, 5, 7, 8, 9) = 3&quot;), levels = 1:3, labels = c(&#39;Ocupado&#39;, &#39;Desempleado&#39;, &#39;Inactivo&#39;)), ocup_w03 = factor(car::recode(m02_w03, &quot;1:3 = 1; 6 = 2; c(4, 5, 7, 8, 9) = 3&quot;), levels = 1:3, labels = c(&#39;Ocupado&#39;, &#39;Desempleado&#39;, &#39;Inactivo&#39;)), ocup_w04 = factor(car::recode(m02_w04, &quot;1:3 = 1; 6 = 2; c(4, 5, 7, 8, 9) = 3&quot;), levels = 1:3, labels = c(&#39;Ocupado&#39;, &#39;Desempleado&#39;, &#39;Inactivo&#39;)), ocup_w05 = factor(car::recode(m02_w05, &quot;1:3 = 1; 6 = 2; c(4, 5, 7, 8, 9) = 3&quot;), levels = 1:3, labels = c(&#39;Ocupado&#39;, &#39;Desempleado&#39;, &#39;Inactivo&#39;)), insatisf_ing_w01 = factor(m16_w01 %in% 1:2), insatisf_ing_w02 = factor(m16_w02 %in% 1:2), insatisf_ing_w03 = factor(m16_w03 %in% 1:2), insatisf_ing_w04 = factor(m16_w04 %in% 1:2), insatisf_ing_w05 = factor(m16_w05 %in% 1:2), activ_fisica_w01 = factor(s04_w01 %in% 1:4), activ_fisica_w03 = factor(s04_w03 %in% 1:4), activ_fisica_w05 = factor(s04_w05 %in% 1:4), sobrecarga_deuda_w01 = factor(m43_w01 %in% 4:5), sobrecarga_deuda_w03 = factor(m43_w03 %in% 4:5), sobrecarga_deuda_w05 = factor(m43_w05 %in% 4:5)) 3.1.1 Trayectorias de variables independientes: trayectoria &lt;- function(.data, vars, K, olas = c(2016:2019, 2021), ...) { seq &lt;- TraMineR::seqdef(.data, var = vars, ..., weights = elsoc_salud_modelo$ponderador02_w01) dist &lt;- TraMineR::seqdist(seq, method = &quot;LCS&quot;, with.missing = TRUE) ward &lt;- cluster::agnes(dist, diss = TRUE, method = &#39;ward&#39;) TraMineR::seqIplot(seq, group = stats::cutree(ward, k = K), border = NA, space = 0, idxs = 0, xtlab = olas) TraMineR::seqmtplot(seq, group = stats::cutree(ward, k = K), border = NA, space = 0) } Insatisfacción con el ingreso trayectoria(elsoc_salud_modelo, vars = c(&#39;insatisf_ing_w01&#39;, &#39;insatisf_ing_w02&#39;, &#39;insatisf_ing_w03&#39;, &#39;insatisf_ing_w04&#39;, &#39;insatisf_ing_w05&#39;), K = 3) trayectoria(elsoc_salud_modelo, vars = c(&#39;insatisf_ing_w01&#39;, &#39;insatisf_ing_w02&#39;, &#39;insatisf_ing_w03&#39;, &#39;insatisf_ing_w04&#39;, &#39;insatisf_ing_w05&#39;), K = 4) Situación ocupacional trayectoria(elsoc_salud_modelo, vars = c(&#39;ocup_w01&#39;, &#39;ocup_w02&#39;, &#39;ocup_w03&#39;, &#39;ocup_w04&#39;, &#39;ocup_w05&#39;), K = 3) trayectoria(elsoc_salud_modelo, vars = c(&#39;ocup_w01&#39;, &#39;ocup_w02&#39;, &#39;ocup_w03&#39;, &#39;ocup_w04&#39;, &#39;ocup_w05&#39;), K = 4) trayectoria(elsoc_salud_modelo, vars = c(&#39;ocup_w01&#39;, &#39;ocup_w02&#39;, &#39;ocup_w03&#39;, &#39;ocup_w04&#39;, &#39;ocup_w05&#39;), K = 5) Sobrecarga por deudas trayectoria(elsoc_salud_modelo, vars = c(&#39;sobrecarga_deuda_w01&#39;, &#39;sobrecarga_deuda_w03&#39;, &#39;sobrecarga_deuda_w05&#39;), olas = c(2016, 2018, 2021), K = 3) trayectoria(elsoc_salud_modelo, vars = c(&#39;sobrecarga_deuda_w01&#39;, &#39;sobrecarga_deuda_w03&#39;, &#39;sobrecarga_deuda_w05&#39;), olas = c(2016, 2018, 2021), K = 4) trayectoria(elsoc_salud_modelo, vars = c(&#39;sobrecarga_deuda_w01&#39;, &#39;sobrecarga_deuda_w03&#39;, &#39;sobrecarga_deuda_w05&#39;), olas = c(2016, 2018, 2021), K = 5) Avtividad física regular trayectoria(elsoc_salud_modelo, vars = c(&#39;activ_fisica_w01&#39;, &#39;activ_fisica_w03&#39;, &#39;activ_fisica_w05&#39;), olas = c(2016, 2018, 2021), K = 3) trayectoria(elsoc_salud_modelo, vars = c(&#39;activ_fisica_w01&#39;, &#39;activ_fisica_w03&#39;, &#39;activ_fisica_w05&#39;), olas = c(2016, 2018, 2021), K = 4) trayectoria(elsoc_salud_modelo, vars = c(&#39;activ_fisica_w01&#39;, &#39;activ_fisica_w03&#39;, &#39;activ_fisica_w05&#39;), olas = c(2016, 2018, 2021), K = 5) "],["modelo-multinomial-logit.html", "Capítulo 4 Modelo multinomial logit", " Capítulo 4 Modelo multinomial logit m1 &lt;- elsoc_salud_modelo %&gt;% multinom(trayectoria_gmm.4lin ~ m0_sexo_w01 + m0_edad_w01 + quintil_w01 + sobrecarga_deuda_w01 + sobrecarga_deuda_w03 + sobrecarga_deuda_w05 + ocup_w01, data = .) ## # weights: 52 (36 variable) ## initial value 1700.983181 ## iter 10 value 1062.831272 ## iter 20 value 1029.722426 ## iter 30 value 1026.119479 ## iter 40 value 1026.048938 ## final value 1026.048643 ## converged m2 &lt;- elsoc_salud_modelo %&gt;% multinom(trayectoria_gmm.4lin ~ m0_sexo_w01 + m0_edad_w01 + log_ing + sobrecarga_deuda_w03 + sobrecarga_deuda_w05 + ocup_w01, data = .) ## # weights: 36 (24 variable) ## initial value 1696.824298 ## iter 10 value 1115.283864 ## iter 20 value 1033.625271 ## iter 30 value 1031.007904 ## final value 1030.986865 ## converged m3 &lt;- elsoc_salud_modelo %&gt;% multinom(trayectoria_gmm.4lin ~ m0_sexo_w01 + m0_edad_w01 + factor(m16_w01 %in% 1:2) + sobrecarga_deuda_w03 + sobrecarga_deuda_w05 + ocup_w01, data = .) ## # weights: 36 (24 variable) ## initial value 1700.983181 ## iter 10 value 1077.163163 ## iter 20 value 1044.037857 ## iter 30 value 1042.340184 ## final value 1042.337840 ## converged modelsummary(list(m1, m2, m3), stars = c(&#39;*&#39; = .05, &#39;**&#39; = .01, &#39;***&#39; = .001), group = model + term ~ y.level) Trayectoria media Trayectoria descendente Trayectoria ascendente Model 1 (Intercept) -2.209*** -6.622*** -5.152*** (0.401) (1.194) (0.856) m0_sexo_w01 0.945*** 1.482** 1.234*** (0.162) (0.504) (0.357) m0_edad_w01 -0.006 0.016 0.007 (0.005) (0.012) (0.010) quintil_w01Quintil 2 -0.440* -0.713 -0.527 (0.212) (0.470) (0.366) quintil_w01Quintil 3 -0.278 -0.989 -0.910* (0.206) (0.516) (0.411) quintil_w01Quintil 4 -0.086 -0.372 -0.297 (0.211) (0.478) (0.380) quintil_w01Quintil 5 -0.555* -0.704 -0.639 (0.248) (0.607) (0.477) sobrecarga_deuda_w01TRUE 0.662*** 0.390 0.797* (0.170) (0.406) (0.311) sobrecarga_deuda_w03TRUE 0.236 0.895* 0.160 (0.167) (0.383) (0.316) sobrecarga_deuda_w05TRUE 0.480* 1.199** 1.345*** (0.201) (0.394) (0.312) ocup_w01Desempleado -0.604 -0.004 0.107 (0.346) (0.789) (0.581) ocup_w01Inactivo 0.101 0.496 0.472 (0.159) (0.378) (0.297) Model 2 (Intercept) 0.684 -3.281 4.096 (1.356) (3.585) (2.916) m0_sexo_w01 0.851*** 1.595** 0.974** (0.160) (0.551) (0.357) m0_edad_w01 -0.008 0.017 0.005 (0.005) (0.013) (0.010) sobrecarga_deuda_w03TRUE 0.400* 0.921* 0.313 (0.159) (0.368) (0.299) sobrecarga_deuda_w05TRUE 0.596** 1.211** 1.475*** (0.197) (0.394) (0.306) ocup_w01Desempleado -0.637 -0.650 0.018 (0.344) (1.056) (0.577) ocup_w01Inactivo 0.052 0.415 0.319 (0.156) (0.373) (0.293) log_ing -0.232* -0.334 -0.748*** (0.102) (0.267) (0.224) Model 3 (Intercept) -2.345*** -7.115*** -5.603*** (0.359) (1.136) (0.803) m0_sexo_w01 0.914*** 1.446** 1.167*** (0.158) (0.499) (0.351) m0_edad_w01 -0.007 0.016 0.006 (0.005) (0.012) (0.009) sobrecarga_deuda_w03TRUE 0.431** 1.003** 0.378 (0.159) (0.362) (0.297) sobrecarga_deuda_w05TRUE 0.609** 1.295*** 1.502*** (0.197) (0.385) (0.303) ocup_w01Desempleado -0.517 0.197 0.490 (0.353) (0.825) (0.615) ocup_w01Inactivo 0.162 0.590 0.765* (0.179) (0.460) (0.374) factor(m16_w01 %in% 1 × 2)TRUE 0.116 0.082 0.483 (0.176) (0.495) (0.386) * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
