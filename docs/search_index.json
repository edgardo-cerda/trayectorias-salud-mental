[["index.html", "Trayectorias de sintomatología depresiva Preambulo 0.1 Cargar librerías 0.2 Cargar y preparar datos ELSOC", " Trayectorias de sintomatología depresiva Álvaro Jiménez, Fabián Duarte, Edgardo Cerda Preambulo 0.1 Cargar librerías # Librerías básicas library(tidyverse) library(sjlabelled) # Librerias análisis de secuencia library(TraMineR) library(TraMineRextras) library(WeightedCluster) library(cluster) # Librería ELSOC library(elsoc) # Librerias graficos library(ggpubr) library(ggsankey) # Libreria analisis estadístico library(nnet) library(modelsummary) 0.2 Cargar y preparar datos ELSOC # Cargar datos ELSOC: elsoc::load_elsoc(data = &#39;wide&#39;) # Crear variables de sintomatología depresiva por ola: elsoc_salud &lt;- elsoc_wide_2016_2021 %&gt;% # Se conservan observaciones presentes en las 5 olas filter(tipo_atricion == 1) %&gt;% # Crear variables de PHQ9 purrr::map_at(.at = vars(starts_with(&#39;s11_0&#39;)), .f = function(s) car::recode(s, &quot;1 = 0; 2 = 1; 3 = 2; c(4, 5) = 3; c(-888, -999) = NA&quot;)) %&gt;% as.data.frame() %&gt;% mutate(phq9_w01 = (s11_01_w01 + s11_02_w01 + s11_03_w01 + s11_04_w01 + s11_05_w01 + s11_06_w01 + s11_07_w01 + s11_08_w01 + s11_09_w01), phq9_w02 = (s11_01_w02 + s11_02_w02 + s11_03_w02 + s11_04_w02 + s11_05_w02 + s11_06_w02 + s11_07_w02 + s11_08_w02 + s11_09_w02), phq9_w03 = (s11_01_w03 + s11_02_w03 + s11_03_w03 + s11_04_w03 + s11_05_w03 + s11_06_w03 + s11_07_w03 + s11_08_w03 + s11_09_w03), phq9_w04 = (s11_01_w04 + s11_02_w04 + s11_03_w04 + s11_04_w04 + s11_05_w04 + s11_06_w04 + s11_07_w04 + s11_08_w04 + s11_09_w04), phq9_w05 = (s11_01_w05 + s11_02_w05 + s11_03_w05 + s11_04_w05 + s11_05_w05 + s11_06_w05 + s11_07_w05 + s11_08_w05 + s11_09_w05)) %&gt;% # Quitar NAs filter(!is.na(phq9_w01), !is.na(phq9_w02), !is.na(phq9_w03), !is.na(phq9_w04), !is.na(phq9_w05)) %&gt;% # Crear indicador de depresión en 4 y en 2 categorías: mutate(depr4_w01 = car::recode(phq9_w01, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr4_w02 = car::recode(phq9_w02, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr4_w03 = car::recode(phq9_w03, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr4_w04 = car::recode(phq9_w04, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr4_w05 = car::recode(phq9_w05, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr2_w01 = car::recode(phq9_w01, &quot;0:9 = 0; 10:27 = 1&quot;), depr2_w02 = car::recode(phq9_w02, &quot;0:9 = 0; 10:27 = 1&quot;), depr2_w03 = car::recode(phq9_w03, &quot;0:9 = 0; 10:27 = 1&quot;), depr2_w04 = car::recode(phq9_w04, &quot;0:9 = 0; 10:27 = 1&quot;), depr2_w05 = car::recode(phq9_w05, &quot;0:9 = 0; 10:27 = 1&quot;), phq_sum = phq9_w01 + phq9_w02 + phq9_w03 + phq9_w04 + phq9_w05 ) "],["trayectorias-de-sintomatología-depresiva.html", "Capítulo 1 Trayectorias de sintomatología depresiva 1.1 Secuencia de depresión con 4 categorías: 1.2 Secuencia de depresión con 2 categorías", " Capítulo 1 Trayectorias de sintomatología depresiva 1.1 Secuencia de depresión con 4 categorías: # Crear objeto con secuencias seq.depr4 &lt;- TraMineR::seqdef(elsoc_salud, var = c(&#39;depr4_w01&#39;, &#39;depr4_w02&#39;, &#39;depr4_w03&#39;, &#39;depr4_w04&#39;, &#39;depr4_w05&#39;), states = c(&#39;Sin síntomas&#39;, &#39;Síntomas medios&#39;, &#39;Síntomas moderados&#39;, &#39;Síntomas severos&#39;), labels = c(&#39;Sin&#39;, &#39;Medios&#39;, &#39;Moderados&#39;, &#39;Severos&#39;), weights = elsoc_salud$ponderador02_w01, cpal = c(&#39;lightgreen&#39;, &#39;mediumturquoise&#39;, &#39;skyblue3&#39;, &#39;slateblue4&#39;)) 1.1.1 Gráfico de secuencias: Muestra las secuencias/trayectorias que cubren el 95% de la muestra. Son 260 secuencias, ordenadas según frecuencia: TraMineR::seqfplot(seq.depr4, border = NA, with.legend = &quot;top&quot;, idxs = 1:260, space = 0) 1.1.2 Frecuencia de estados y transiciones seqstatd(seq.depr4) ## [State frequencies] ## depr4_w01 depr4_w02 depr4_w03 depr4_w04 depr4_w05 ## Sin síntomas 0.480 0.49 0.44 0.37 0.496 ## Síntomas medios 0.303 0.30 0.32 0.38 0.297 ## Síntomas moderados 0.145 0.11 0.14 0.15 0.118 ## Síntomas severos 0.072 0.10 0.10 0.10 0.089 ## ## [Valid states] ## depr4_w01 depr4_w02 depr4_w03 depr4_w04 depr4_w05 ## N 1387 1387 1387 1387 1387 ## ## [Entropy index] ## depr4_w01 depr4_w02 depr4_w03 depr4_w04 depr4_w05 ## H 0.85 0.86 0.89 0.9 0.85 seqtrate(seq.depr4) ## [-&gt; Sin síntomas] [-&gt; Síntomas medios] ## [Sin síntomas -&gt;] 0.6315011 0.2732770 ## [Síntomas medios -&gt;] 0.3831385 0.4058737 ## [Síntomas moderados -&gt;] 0.1763785 0.3718435 ## [Síntomas severos -&gt;] 0.1974423 0.2106458 ## [-&gt; Síntomas moderados] [-&gt; Síntomas severos] ## [Sin síntomas -&gt;] 0.05812547 0.03709645 ## [Síntomas medios -&gt;] 0.14048374 0.07050413 ## [Síntomas moderados -&gt;] 0.24994502 0.20183294 ## [Síntomas severos -&gt;] 0.25802652 0.33388539 1.1.3 Clusters de secuencias: # Medir distancias entre secuencias usando analisis de secuencias usando optimal matching analysis # Se define matriz de costos de sustitución basados en valores medios de indice phq9 substitution_cost_matrix &lt;- as.matrix(rbind(c(0, 5, 10, 19), c(5, 0, 5, 14), c(10, 5, 0, 9), c(19, 14, 9, 0))) dist.depr4 &lt;- TraMineR::seqdist(seq.depr4, method = &quot;OM&quot;, sm = substitution_cost_matrix) # Construir tipos de trayectorias con analisis de cluster jerarquico Ward ward.depr4 &lt;- cluster::agnes(dist.depr4, diss = TRUE, method = &#39;ward&#39;) # Comparar soluciones con diferentes numeros de trayectorias (se prueban de 2 a 10 clusters) ward.range.depr4 &lt;- WeightedCluster::as.clustrange(ward.depr4, diss = dist.depr4, ncluster = 10) # Visualizar clusters: ward.range.depr4$stats %&gt;% mutate(clusters = 2:10) %&gt;% pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC), names_to = &#39;indicador&#39;, values_to = &#39;value&#39;) %&gt;% group_by(indicador) %&gt;% mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %&gt;% ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) + geom_line() + scale_x_continuous(breaks = 2:10) 1.1.4 Graficos de secuencias por clusters Pruebas con 4, 5, 6 y 7 clusters grafico_trayectorias4_K &lt;- function(K, ward) { elsoc_trayectorias &lt;- elsoc_salud elsoc_trayectorias$trayectoria &lt;- stats::cutree(ward, k = K) nested_data &lt;- elsoc_trayectorias %&gt;% group_by(trayectoria) %&gt;% nest() N &lt;- purrr::map(.x = nested_data$data, .f = ~dim(.x)[1]) graficos &lt;- purrr::map2(.x = nested_data$data, .y = N, .f = ~ .x %&gt;% ggsankey::make_long(depr4_w01, depr4_w02, depr4_w03, depr4_w04, depr4_w05, value = &#39;ponderador02_w01&#39;) %&gt;% mutate(depr = factor(node, levels = 1:4, labels = c(&#39;Sin sintomas&#39;, &#39;medios&#39;, &#39;moderados&#39;, &#39;severos&#39;)), x = factor(x, levels = glue::glue(&#39;depr4_w0{1:5}&#39;), labels = glue::glue(&#39;{c(2016:2019, 2021)}&#39;))) %&gt;% ggplot(aes(x = x, next_x = next_x, node = node, next_node = next_node, fill = depr, value = value)) + geom_sankey(flow.alpha = .6) + labs(x = NULL, caption = glue::glue(&#39;N={.y}&#39;)) + theme(legend.position = &#39;bottom&#39;, legend.title = element_blank()) + scale_fill_viridis_d(direction = -1, end = .8, drop = FALSE)) plot &lt;- ggpubr::ggarrange(plotlist = graficos, common.legend = TRUE, legend = &#39;bottom&#39;) annotate_figure(plot, top = text_grob(glue::glue(&#39;{K} clusters&#39;))) } purrr::map(.x = 4:7, ward = ward.depr4, .f = grafico_trayectorias4_K) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] 1.1.5 Opción preferida: 5 clusters Me gusta la opción con 5 clusters. Nombres provisorios: - Sintomas severos recurrentes - Remisión sintomas - Sintomas severos nuevos - Sintomas intermitentes - Sin sintomas/sintomas medios elsoc_salud_5 &lt;- elsoc_salud elsoc_salud_5$trayectoria &lt;- stats::cutree(ward.depr4, k = 5) N &lt;- table(elsoc_salud_5$trayectoria) nombres_cluster &lt;- c(&#39;Sintomas severos recurrentes&#39;, &#39;Remisión sintomas&#39;, &#39;Síntomas severos nuevos&#39;, &#39;Síntomas intermitentes&#39;, &#39;Sin sintomas/sintomas medios&#39;) graficos &lt;- purrr::map(.x = 1:5, .f = ~ elsoc_salud_5 %&gt;% filter(trayectoria == .x) %&gt;% ggsankey::make_long(depr4_w01, depr4_w02, depr4_w03, depr4_w04, depr4_w05, value = &#39;ponderador02_w01&#39;) %&gt;% mutate(depr = factor(node, levels = 1:4, labels = c(&#39;Sin sintomas&#39;, &#39;medios&#39;, &#39;moderados&#39;, &#39;severos&#39;)), x = factor(x, levels = glue::glue(&#39;depr4_w0{1:5}&#39;), labels = glue::glue(&#39;{c(2016:2019, 2021)}&#39;))) %&gt;% ggplot(aes(x = x, next_x = next_x, node = node, next_node = next_node, fill = depr, value = value)) + geom_sankey(flow.alpha = .6) + labs(x = NULL, caption = glue::glue(&#39;N={N[.x]}&#39;)) + theme(legend.position = &#39;bottom&#39;, legend.title = element_blank()) + scale_fill_viridis_d(direction = -1, end = .8) + ggtitle(NULL, subtitle = glue::glue(&#39;{nombres_cluster[.x]}&#39;)) ) plot &lt;- ggpubr::ggarrange(plotlist = graficos, common.legend = TRUE, legend = &#39;bottom&#39;) annotate_figure(plot, top = text_grob(glue::glue(&#39;5 clusters&#39;))) 1.2 Secuencia de depresión con 2 categorías # Crear objeto con secuencias seq.depr2 &lt;- TraMineR::seqdef(elsoc_salud, var = c(&#39;depr2_w01&#39;, &#39;depr2_w02&#39;, &#39;depr2_w03&#39;, &#39;depr2_w04&#39;, &#39;depr2_w05&#39;), states = c(&#39;Sin síntomas/sintomas medios&#39;, &#39;sintomas moderados/severos&#39;), labels = c(&#39;Sin/medios&#39;, &#39;Moderados/Severos&#39;), weights = elsoc_salud$ponderador02_w01, cpal = c(&#39;lightgreen&#39;, &#39;slateblue4&#39;)) 1.2.1 Gráfico de secuencias: Hay 32 secuencias en total TraMineR::seqfplot(seq.depr2, border = NA, with.legend = &quot;top&quot;, idxs = 1:32, space = 0) 1.2.2 Clusters de secuencias: dist.depr2 &lt;- TraMineR::seqdist(seq.depr2, method = &quot;OM&quot;, sm = &#39;CONSTANT&#39;) # Construir tipos de trayectorias con analisis de cluster jerarquico Ward ward.depr2 &lt;- cluster::agnes(dist.depr2, diss = TRUE, method = &#39;ward&#39;) # Comparar soluciones con diferentes numeros de trayectorias (se prueban de 2 a 10 clusters) ward.range.depr2 &lt;- WeightedCluster::as.clustrange(ward.depr2, diss = dist.depr2, ncluster = 10) # Visualizar clusters: ward.range.depr2$stats %&gt;% mutate(clusters = 2:10) %&gt;% pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC), names_to = &#39;indicador&#39;, values_to = &#39;value&#39;) %&gt;% group_by(indicador) %&gt;% mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %&gt;% ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) + geom_line() + scale_x_continuous(breaks = 2:10) 1.2.3 Gráficos de secuencia por clusters grafico_trayectorias2_K &lt;- function(K, ward) { elsoc_trayectorias &lt;- elsoc_salud elsoc_trayectorias$trayectoria &lt;- stats::cutree(ward, k = K) nested_data &lt;- elsoc_trayectorias %&gt;% group_by(trayectoria) %&gt;% nest() N &lt;- purrr::map(.x = nested_data$data, .f = ~dim(.x)[1]) graficos &lt;- purrr::map2(.x = nested_data$data, .y = N, .f = ~ .x %&gt;% ggsankey::make_long(depr2_w01, depr2_w02, depr2_w03, depr2_w04, depr2_w05, value = &#39;ponderador02_w01&#39;) %&gt;% mutate(depr = factor(node, levels = 0:1, labels = c(&#39;Sin sintomas/medios&#39;, &#39;Síntomas moderados/severos&#39;)), x = factor(x, levels = glue::glue(&#39;depr2_w0{1:5}&#39;), labels = glue::glue(&#39;{c(2016:2019, 2021)}&#39;))) %&gt;% ggplot(aes(x = x, next_x = next_x, node = node, next_node = next_node, fill = depr, value = value)) + geom_sankey(flow.alpha = .6) + labs(x = NULL, caption = glue::glue(&#39;N={.y}&#39;)) + theme(legend.position = &#39;bottom&#39;, legend.title = element_blank()) + scale_fill_viridis_d(direction = -1, end = .8, drop = FALSE)) plot &lt;- ggpubr::ggarrange(plotlist = graficos, common.legend = TRUE, legend = &#39;bottom&#39;) annotate_figure(plot, top = text_grob(glue::glue(&#39;{K} clusters&#39;))) } purrr::map(.x = 2:7, ward = ward.depr2, .f = grafico_trayectorias2_K) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] ## ## [[5]] ## ## [[6]] "],["creacion-variables-independientes.html", "Capítulo 2 Creacion Variables independientes", " Capítulo 2 Creacion Variables independientes "],["modelo-multinomial-logit.html", "Capítulo 3 Modelo multinomial logit", " Capítulo 3 Modelo multinomial logit m1 &lt;- elsoc_salud_5 %&gt;% filter(!elsoc::is_nsnr(m30_w01, m30_w02, m30_w03, m30_w04, m30b_w05)) %&gt;% mutate( m30_w01 = 1000*as.numeric(car::recode(m30_w01, &quot;1 = 220; 2 = 250; 3 = 305; 4 = 355; 5 = 400; 6 = 445; 7 = 490; 8 = 535; 9 = 585; 10 = 640; 11 = 700; 12 = 765; 13 = 845; 14 = 935; 15 = 1040; 16 = 1180; 17 = 1375; 18 = 1670; 19 = 2275; 20 = 2700; NA = NA&quot;)), m29_w01_imp = ifelse(is_nsnr(m29_w01), m30_w01, m29_w01), ypc_w01 = m29_w01_imp / nhogar1_w01) %&gt;% mutate(quintil_w01 = statar::xtile(ypc_w01, n = 5, wt = ponderador02_w01), # quintil_w01 = factor(quintil_w01, # levels = 1:5, # labels = glue::glue(&#39;Quintil {1:5}&#39;)), trayectoria = factor(trayectoria, levels = 1:5, labels = c(&#39;Sintomas severos recurrentes&#39;, &#39;Remisión sintomas&#39;, &#39;Sintomas severos nuevos&#39;, &#39;Sintomas intermitentes&#39;, &#39;Sin sintomas/sintomas medios&#39;)), trayectoria = fct_rev(trayectoria), sexo = factor(m0_sexo_w01, levels = 1:2, labels = c(&#39;Hombre&#39;, &#39;Mujer&#39;))) %&gt;% multinom(trayectoria ~ sexo + m0_edad_w01 + quintil_w01, data = .) ## # weights: 25 (16 variable) ## initial value 1977.999194 ## iter 10 value 1675.752393 ## iter 20 value 1471.810141 ## final value 1470.686805 ## converged modelsummary(m1, stars = c(&#39;*&#39; = .05, &#39;**&#39; = .01, &#39;***&#39; = .001), group = model + term ~ y.level) Sintomas intermitentes Sintomas severos nuevos Remisión sintomas Sintomas severos recurrentes Model 1 (Intercept) -0.693* -1.436*** -2.707*** -2.580*** (0.349) (0.393) (0.536) (0.565) sexoMujer 0.470** 0.685*** 0.900** 1.277*** (0.177) (0.202) (0.280) (0.326) m0_edad_w01 -0.012* -0.003 0.010 0.002 (0.006) (0.006) (0.008) (0.008) quintil_w01 -0.124* -0.139* -0.184* -0.245** (0.061) (0.067) (0.089) (0.093) * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
