[["index.html", "Trayectorias de sintomatología depresiva Cargar y preparar datos ELSOC 0.1 Cargar librerías", " Trayectorias de sintomatología depresiva Álvaro Jiménez, Fabián Duarte, Edgardo Cerda Cargar y preparar datos ELSOC 0.1 Cargar librerías # Librerías básicas library(tidyverse) library(sjlabelled) # Librerias análisis de secuencia library(TraMineR) library(TraMineRextras) library(WeightedCluster) library(cluster) # Librería ELSOC library(elsoc) # Librerias graficos library(ggpubr) library(shiny) library(plotly) library(ggstance) # Libreria analisis estadístico library(nnet) library(modelsummary) library(lcmm) library(rcompanion) library(statar) library(marginaleffects) # Cargar datos ELSOC: # elsoc::load_elsoc(data = &#39;wide&#39;) load(file.path(&#39;..&#39;, &#39;inputs&#39;, &#39;ELSOC_Wide_2016_2021_v1.00_R.RData&#39;)) # Crear variables de sintomatología depresiva por ola: elsoc_salud &lt;- elsoc_wide_2016_2021 %&gt;% # Se conservan observaciones presentes en las 5 olas filter(tipo_atricion %in% 1:2) %&gt;% # Crear variables de PHQ9 purrr::map_at(.at = vars(starts_with(&#39;s11_0&#39;)), .f = function(s) car::recode(s, &quot;1 = 0; 2 = 1; 3 = 2; c(4, 5) = 3; c(-888, -999) = NA&quot;)) %&gt;% as.data.frame() %&gt;% mutate(phq9_w01 = (s11_01_w01 + s11_02_w01 + s11_03_w01 + s11_04_w01 + s11_05_w01 + s11_06_w01 + s11_07_w01 + s11_08_w01 + s11_09_w01), phq9_w02 = (s11_01_w02 + s11_02_w02 + s11_03_w02 + s11_04_w02 + s11_05_w02 + s11_06_w02 + s11_07_w02 + s11_08_w02 + s11_09_w02), phq9_w03 = (s11_01_w03 + s11_02_w03 + s11_03_w03 + s11_04_w03 + s11_05_w03 + s11_06_w03 + s11_07_w03 + s11_08_w03 + s11_09_w03), phq9_w04 = (s11_01_w04 + s11_02_w04 + s11_03_w04 + s11_04_w04 + s11_05_w04 + s11_06_w04 + s11_07_w04 + s11_08_w04 + s11_09_w04) ) %&gt;% # Quitar NAs filter(!is.na(phq9_w01), !is.na(phq9_w02), !is.na(phq9_w03), !is.na(phq9_w04)) %&gt;% # Crear indicador de depresión en 4 y en 2 categorías: mutate(depr4_w01 = car::recode(phq9_w01, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr4_w02 = car::recode(phq9_w02, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr4_w03 = car::recode(phq9_w03, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr4_w04 = car::recode(phq9_w04, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr2_w01 = car::recode(phq9_w01, &quot;0:9 = 0; 10:27 = 1&quot;), depr2_w02 = car::recode(phq9_w02, &quot;0:9 = 0; 10:27 = 1&quot;), depr2_w03 = car::recode(phq9_w03, &quot;0:9 = 0; 10:27 = 1&quot;), depr2_w04 = car::recode(phq9_w04, &quot;0:9 = 0; 10:27 = 1&quot;), phq_sum = depr4_w01 + depr4_w02 + depr4_w03 + depr4_w04 ) # Cargar datos ELSOC LONG: # elsoc::load_elsoc(data = &#39;long&#39;) load(file.path(&#39;..&#39;, &#39;inputs&#39;, &#39;ELSOC_Long_2016_2021_v1.00_R.RData&#39;)) # Crear variables de sintomatología depresiva por ola LONG: elsoc_salud_long &lt;- elsoc_long_2016_2021 %&gt;% # Se conservan observaciones presentes en las 5 olas filter(tipo_atricion %in% 1:2, ola != 5) %&gt;% # Crear variables de PHQ9 purrr::map_at(.at = vars(starts_with(&#39;s11_0&#39;)), .f = function(s) car::recode(s, &quot;1 = 0; 2 = 1; 3 = 2; c(4, 5) = 3; c(-888, -999) = NA&quot;)) %&gt;% as.data.frame() %&gt;% mutate(phq9 = (s11_01 + s11_02 + s11_03 + s11_04 + s11_05 + s11_06 + s11_07 + s11_08 + s11_09)) %&gt;% # Quitar NAs filter(!is.na(phq9)) %&gt;% # Crear indicador de depresión en 4 y en 2 categorías: mutate(depr4 = car::recode(phq9, &quot;0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4&quot;), depr2 = car::recode(phq9, &quot;0:9 = 0; 10:27 = 1&quot;)) "],["trayectorias-de-sintomatología-depresiva.-modelo-optimal-matching.html", "Capítulo 1 Trayectorias de sintomatología depresiva. Modelo Optimal-Matching 1.1 Secuencia de depresión con 4 categorías:", " Capítulo 1 Trayectorias de sintomatología depresiva. Modelo Optimal-Matching 1.1 Secuencia de depresión con 4 categorías: # Crear objeto con secuencias seq.depr4 &lt;- TraMineR::seqdef(elsoc_salud, var = c(&#39;depr4_w01&#39;, &#39;depr4_w02&#39;, &#39;depr4_w03&#39;, &#39;depr4_w04&#39;), states = c(&#39;Sin síntomas&#39;, &#39;Síntomas medios&#39;, &#39;Síntomas moderados&#39;, &#39;Síntomas severos&#39;), labels = c(&#39;Sin síntomas&#39;, &#39;Síntomas medios&#39;, &#39;Sintomas moderados&#39;, &#39;Síntomas severos&#39;), weights = elsoc_salud$ponderador02_w01, cpal = c(&#39;lightgreen&#39;, &#39;mediumturquoise&#39;, &#39;skyblue3&#39;, &#39;slateblue4&#39;)) 1.1.1 Gráfico de secuencias: Muestra todas las secuencias, ordenadas según la suma total del indice phq9 (sumando las 5 olas) TraMineR::seqIplot(seq.depr4, border = NA, xtlab = 2016:2019, space = 0, sortv = elsoc_salud$phq_sum) 1.1.2 Frecuencia de estados y transiciones seqstatd(seq.depr4) ## [State frequencies] ## depr4_w01 depr4_w02 depr4_w03 depr4_w04 ## Sin síntomas 0.481 0.49 0.435 0.37 ## Síntomas medios 0.307 0.29 0.329 0.39 ## Síntomas moderados 0.138 0.11 0.137 0.15 ## Síntomas severos 0.075 0.11 0.099 0.10 ## ## [Valid states] ## depr4_w01 depr4_w02 depr4_w03 depr4_w04 ## N 1728 1728 1728 1728 ## ## [Entropy index] ## depr4_w01 depr4_w02 depr4_w03 depr4_w04 ## H 0.85 0.86 0.89 0.9 seqtrate(seq.depr4) ## [-&gt; Sin síntomas] [-&gt; Síntomas medios] ## [Sin síntomas -&gt;] 0.6038410 0.2922604 ## [Síntomas medios -&gt;] 0.3438261 0.4239771 ## [Síntomas moderados -&gt;] 0.1729046 0.3531208 ## [Síntomas severos -&gt;] 0.1978647 0.2363666 ## [-&gt; Síntomas moderados] [-&gt; Síntomas severos] ## [Sin síntomas -&gt;] 0.0594495 0.04444910 ## [Síntomas medios -&gt;] 0.1467422 0.08545468 ## [Síntomas moderados -&gt;] 0.2571979 0.21677672 ## [Síntomas severos -&gt;] 0.2669224 0.29884634 1.1.3 Clusters de secuencias: # Medir distancias entre secuencias usando analisis de secuencias usando optimal matching analysis # Se define matriz de costos de sustitución basados en valores medios de indice phq9 substitution_cost_matrix &lt;- as.matrix(rbind(c(0, 5, 10, 19), c(5, 0, 5, 14), c(10, 5, 0, 9), c(19, 14, 9, 0))) dist.depr4 &lt;- TraMineR::seqdist(seq.depr4, method = &quot;OM&quot;, sm = substitution_cost_matrix) # Construir tipos de trayectorias con analisis de cluster jerarquico Ward ward.depr4 &lt;- cluster::agnes(dist.depr4, diss = TRUE, method = &#39;ward&#39;) Indicadores de calidad de partición: Se evalúa según los indicadores: kableExtra::kbl(data.frame(indicador = c(&#39;Point Biserial Correlation&#39;, &quot;Hubert&#39;s Somers&#39; D&quot;, &quot;Hubert&#39;s C&quot;, &quot;Average Silhouette Width (weighted)&quot;), abreviacion = c(&#39;PBC&#39;, &#39;HGSD&#39;, &#39;HC&#39;, &#39;ASWw&#39;), interpretacion = c(&#39;Mide la capacidad de la clusterización de reproducir las distancias&#39;, &#39;Mide la capacidad de la clusterización de reproducir las distancias tomando en cuenta empates en distancias&#39;, &#39;Mide la brecha entre la clusterización obtenida y la mejor partición teóricamente posible con este número de grupos y distancias&#39;, &#39;Mide la coherencia de asignaciones. Alta coherencia indica una alta distancia entre grupos y fuerte homogeneidad inter-grupal&#39;))) indicador abreviacion interpretacion Point Biserial Correlation PBC Mide la capacidad de la clusterización de reproducir las distancias Hubert’s Somers’ D HGSD Mide la capacidad de la clusterización de reproducir las distancias tomando en cuenta empates en distancias Hubert’s C HC Mide la brecha entre la clusterización obtenida y la mejor partición teóricamente posible con este número de grupos y distancias Average Silhouette Width (weighted) ASWw Mide la coherencia de asignaciones. Alta coherencia indica una alta distancia entre grupos y fuerte homogeneidad inter-grupal # Comparar soluciones con diferentes numeros de trayectorias (se prueban de 2 a 10 clusters) ward.range.depr4 &lt;- WeightedCluster::as.clustrange(ward.depr4, diss = dist.depr4, ncluster = 10) # Visualizar clusters: ward.range.depr4$stats %&gt;% mutate(clusters = 2:10) %&gt;% pivot_longer(cols = c(ASWw, HG, PBC, HC), names_to = &#39;indicador&#39;, values_to = &#39;value&#39;) %&gt;% group_by(indicador) %&gt;% mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %&gt;% ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) + geom_line() + scale_x_continuous(breaks = 2:10) Para ASWw, HG y PBC, mientras más alto el valor indica una mejor calidad en la partición. Para HC mientras más bajo es mejor. Los mejores valores parecen estar entre 4 y 5 clusters. 1.1.4 Graficos de secuencias por clusters Pruebas con 4-6 clusters TraMineR::seqfplot(seq.depr4, group = stats::cutree(ward.depr4, k = 4), border = NA, space = 0, idxs = 0, xtlab = 2016:2019) TraMineR::seqdplot(seq.depr4, group = stats::cutree(ward.depr4, k = 4), border = NA, space = 0) TraMineR::seqfplot(seq.depr4, group = stats::cutree(ward.depr4, k = 5), border = NA, space = 0, idxs = 0, xtlab = 2016:2019) TraMineR::seqdplot(seq.depr4, group = stats::cutree(ward.depr4, k = 5), border = NA, space = 0) TraMineR::seqfplot(seq.depr4, group = stats::cutree(ward.depr4, k = 6), border = NA, space = 0, idxs = 0, xtlab = 2016:2019) TraMineR::seqdplot(seq.depr4, group = stats::cutree(ward.depr4, k = 6), border = NA, space = 0) "],["trayectorias-de-sintomatologia-depresiva.-modelo-latent-class-mixed-model-lcmm.html", "Capítulo 2 Trayectorias de sintomatologia depresiva. Modelo Latent Class Mixed Model (LCMM) 2.1 Identificar trayectorias: 2.2 Principales trayectorias", " Capítulo 2 Trayectorias de sintomatologia depresiva. Modelo Latent Class Mixed Model (LCMM) set.seed(123) 2.1 Identificar trayectorias: Modelos de trayectorias lineales: Se usa el modelo de 1 clase para fijar los valores iniciales a iterar: lcmm1_lin &lt;- hlme(phq9 ~ ola, subject = &quot;idencuesta&quot;, ng = 1, data = elsoc_salud_long) lcmm2_lin &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_lin, hlme(phq9 ~ ola, mixture = ~ ola, subject = &quot;idencuesta&quot;, ng = 2, data = elsoc_salud_long)) lcmm3_lin &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_lin, hlme(phq9 ~ ola, mixture = ~ ola, subject = &quot;idencuesta&quot;, ng = 3, data = elsoc_salud_long)) lcmm4_lin &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_lin, hlme(phq9 ~ ola, mixture = ~ ola, subject = &quot;idencuesta&quot;, ng = 4, data = elsoc_salud_long)) lcmm5_lin &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_lin, hlme(phq9 ~ ola, mixture = ~ ola, subject = &quot;idencuesta&quot;, ng = 5, data = elsoc_salud_long)) lcmm6_lin &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_lin, hlme(phq9 ~ ola, mixture = ~ ola, subject = &quot;idencuesta&quot;, ng = 6, data = elsoc_salud_long)) Modelos de trayectorias cuadraticas: lcmm1_quad &lt;- hlme(phq9 ~ ola + I(ola^2), subject = &quot;idencuesta&quot;, ng = 1, data = elsoc_salud_long) lcmm2_quad &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_quad, hlme(phq9 ~ ola + I(ola^2), mixture = ~ ola + I(ola^2), subject = &quot;idencuesta&quot;, ng = 2, data = elsoc_salud_long)) lcmm3_quad &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_quad, hlme(phq9 ~ ola + I(ola^2), mixture = ~ ola + I(ola^2), subject = &quot;idencuesta&quot;, ng = 3, data = elsoc_salud_long)) lcmm4_quad &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_quad, hlme(phq9 ~ ola + I(ola^2), mixture = ~ ola + I(ola^2), subject = &quot;idencuesta&quot;, ng = 4, data = elsoc_salud_long)) lcmm5_quad &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_quad, hlme(phq9 ~ ola + I(ola^2), mixture = ~ ola + I(ola^2), subject = &quot;idencuesta&quot;, ng = 5, data = elsoc_salud_long)) lcmm6_quad &lt;- gridsearch(rep = 10, maxiter = 10, minit = lcmm1_quad, hlme(phq9 ~ ola + I(ola^2), mixture = ~ ola + I(ola^2), subject = &quot;idencuesta&quot;, ng = 6, data = elsoc_salud_long)) Comparación resultados # Comparar resultados: resultados_comparados &lt;- summarytable(lcmm1_lin, lcmm2_lin, lcmm3_lin, lcmm4_lin, lcmm5_lin, lcmm6_lin) postprob(lcmm4_lin) ## ## Posterior classification: ## class1 class2 class3 class4 ## N 392.00 98.00 1346.00 77.00 ## % 20.49 5.12 70.36 4.03 ## ## Posterior classification table: ## --&gt; mean of posterior probabilities in each class ## prob1 prob2 prob3 prob4 ## class1 0.7853 0.0521 0.1343 0.0282 ## class2 0.1376 0.7798 0.0435 0.0392 ## class3 0.0613 0.0045 0.9342 0.0000 ## class4 0.0978 0.0248 0.0000 0.8774 ## ## Posterior probabilities above a threshold (%): ## class1 class2 class3 class4 ## prob&gt;0.7 69.13 68.37 92.35 83.12 ## prob&gt;0.8 51.28 50.00 88.19 75.32 ## prob&gt;0.9 27.81 37.76 80.76 61.04 ## postprob(lcmm5_lin) ## ## Posterior classification: ## class1 class2 class3 class4 class5 ## N 48.00 1243.00 80.00 413.00 129.00 ## % 2.51 64.98 4.18 21.59 6.74 ## ## Posterior classification table: ## --&gt; mean of posterior probabilities in each class ## prob1 prob2 prob3 prob4 prob5 ## class1 0.8455 0.0000 0.0549 0.0025 0.0970 ## class2 0.0000 0.8932 0.0004 0.1045 0.0018 ## class3 0.0238 0.0025 0.8124 0.1239 0.0374 ## class4 0.0003 0.1747 0.0456 0.6945 0.0850 ## class5 0.0432 0.0051 0.0243 0.1600 0.7675 ## ## Posterior probabilities above a threshold (%): ## class1 class2 class3 class4 class5 ## prob&gt;0.7 75.00 88.17 72.50 52.06 68.22 ## prob&gt;0.8 70.83 78.76 58.75 22.76 44.96 ## prob&gt;0.9 52.08 64.60 45.00 0.00 27.91 ## postprob(lcmm6_lin) ## ## Posterior classification: ## class1 class2 class3 class4 class5 class6 ## N 523.00 129.00 48.00 1133.00 0 80.00 ## % 27.34 6.74 2.51 59.23 0 4.18 ## ## Posterior classification table: ## --&gt; mean of posterior probabilities in each class ## prob1 prob2 prob3 prob4 prob5 prob6 ## class1 0.6363 0.0688 0.0002 0.1409 0.1174 0.0365 ## class2 0.1600 0.7675 0.0432 0.0028 0.0023 0.0243 ## class3 0.0025 0.0970 0.8455 0.0000 0.0000 0.0549 ## class4 0.0742 0.0012 0.0000 0.5042 0.4202 0.0002 ## class5 NaN NaN NaN NaN NaN NaN ## class6 0.1239 0.0374 0.0238 0.0014 0.0011 0.8124 ## ## Posterior probabilities above a threshold (%): ## class1 class2 class3 class4 class5 class6 ## prob&gt;0.7 41.11 68.22 75.00 0 NaN 72.50 ## prob&gt;0.8 17.97 44.96 70.83 0 NaN 58.75 ## prob&gt;0.9 0.00 27.91 52.08 0 NaN 45.00 ## kableExtra::kbl(resultados_comparados[,1:4], digits = 1) G loglik npm BIC lcmm1_lin 1 -23481.3 3 46985.3 lcmm2_lin 2 -22741.5 6 45528.4 lcmm3_lin 3 -22642.0 9 45352.1 lcmm4_lin 4 -22555.4 12 45201.5 lcmm5_lin 5 -22530.1 15 45173.5 lcmm6_lin 6 -22530.1 18 45196.2 kableExtra::kbl(resultados_comparados[,5:9], digits = 1) %class1 %class2 %class3 %class4 %class5 lcmm1_lin 100.0 NA NA NA NA lcmm2_lin 19.6 80.4 NA NA NA lcmm3_lin 71.6 4.3 24.1 NA NA lcmm4_lin 20.5 5.1 70.4 4.0 NA lcmm5_lin 2.5 65.0 4.2 21.6 6.7 lcmm6_lin 27.3 6.7 2.5 59.2 0.0 2.2 Principales trayectorias Según criterios de información debería estar entre 4 y 5 clases: summary(lcmm4_lin) ## Heterogenous linear mixed model ## fitted by maximum likelihood method ## ## hlme(fixed = phq9 ~ ola, mixture = ~ola, subject = &quot;idencuesta&quot;, ## ng = 4, data = elsoc_salud_long) ## ## Statistical Model: ## Dataset: elsoc_salud_long ## Number of subjects: 1913 ## Number of observations: 7518 ## Number of latent classes: 4 ## Number of parameters: 12 ## ## Iteration process: ## Convergence criteria satisfied ## Number of iterations: 12 ## Convergence criteria: parameters= 5.9e-05 ## : likelihood= 5.5e-05 ## : second derivatives= 4.8e-10 ## ## Goodness-of-fit statistics: ## maximum log-likelihood: -22555.4 ## AIC: 45134.8 ## BIC: 45201.47 ## ## ## Maximum Likelihood Estimates: ## ## Fixed effects in the class-membership model: ## (the class of reference is the last class) ## ## coef Se Wald p-value ## intercept class1 1.60697 0.17349 9.263 0.00000 ## intercept class2 0.23971 0.26128 0.917 0.35891 ## intercept class3 2.76869 0.17480 15.840 0.00000 ## ## Fixed effects in the longitudinal model: ## ## coef Se Wald p-value ## intercept class1 11.03686 0.60059 18.377 0.00000 ## intercept class2 2.61050 0.81625 3.198 0.00138 ## intercept class3 3.05637 0.17040 17.937 0.00000 ## intercept class4 19.70160 0.78637 25.054 0.00000 ## ola class1 -0.56536 0.18648 -3.032 0.00243 ## ola class2 3.79454 0.32965 11.511 0.00000 ## ola class3 0.46852 0.05640 8.307 0.00000 ## ola class4 -1.22304 0.28501 -4.291 0.00002 ## ## coef Se ## Residual standard error: 4.15204 0.03821 pred_lcmm4_lin &lt;- predictY(lcmm4_lin, data.frame(ola = 1:4)) plot(pred_lcmm4_lin, ylim = c(0, 27)) summary(lcmm5_lin) ## Heterogenous linear mixed model ## fitted by maximum likelihood method ## ## hlme(fixed = phq9 ~ ola, mixture = ~ola, subject = &quot;idencuesta&quot;, ## ng = 5, data = elsoc_salud_long) ## ## Statistical Model: ## Dataset: elsoc_salud_long ## Number of subjects: 1913 ## Number of observations: 7518 ## Number of latent classes: 5 ## Number of parameters: 15 ## ## Iteration process: ## Convergence criteria satisfied ## Number of iterations: 21 ## Convergence criteria: parameters= 4.9e-07 ## : likelihood= 2.8e-07 ## : second derivatives= 1e-13 ## ## Goodness-of-fit statistics: ## maximum log-likelihood: -22530.07 ## AIC: 45090.14 ## BIC: 45173.49 ## ## ## Maximum Likelihood Estimates: ## ## Fixed effects in the class-membership model: ## (the class of reference is the last class) ## ## coef Se Wald p-value ## intercept class1 -1.09528 0.29176 -3.754 0.00017 ## intercept class2 2.10611 0.24776 8.501 0.00000 ## intercept class3 -0.46935 0.31841 -1.474 0.14048 ## intercept class4 1.13362 0.27766 4.083 0.00004 ## ## Fixed effects in the longitudinal model: ## ## coef Se Wald p-value ## intercept class1 19.54452 1.02554 19.058 0.00000 ## intercept class2 2.99013 0.19370 15.437 0.00000 ## intercept class3 3.60755 0.92284 3.909 0.00009 ## intercept class4 7.05191 0.92077 7.659 0.00000 ## intercept class5 17.29622 1.14397 15.120 0.00000 ## ola class1 -0.59844 0.39142 -1.529 0.12629 ## ola class2 0.39012 0.06900 5.654 0.00000 ## ola class3 3.71429 0.33535 11.076 0.00000 ## ola class4 0.49308 0.29471 1.673 0.09431 ## ola class5 -2.12546 0.30100 -7.061 0.00000 ## ## coef Se ## Residual standard error: 4.08242 0.03854 pred_lcmm5_lin &lt;- predictY(lcmm5_lin, data.frame(ola = 1:4)) plot(pred_lcmm5_lin, ylim = c(0, 27)) summary(lcmm6_lin) ## Heterogenous linear mixed model ## fitted by maximum likelihood method ## ## hlme(fixed = phq9 ~ ola, mixture = ~ola, subject = &quot;idencuesta&quot;, ## ng = 6, data = elsoc_salud_long) ## ## Statistical Model: ## Dataset: elsoc_salud_long ## Number of subjects: 1913 ## Number of observations: 7518 ## Number of latent classes: 6 ## Number of parameters: 18 ## ## Iteration process: ## Convergence criteria satisfied ## Number of iterations: 23 ## Convergence criteria: parameters= 9.1e-07 ## : likelihood= 2.7e-07 ## : second derivatives= 6.9e-12 ## ## Goodness-of-fit statistics: ## maximum log-likelihood: -22530.07 ## AIC: 45096.14 ## BIC: 45196.16 ## ## ## Maximum Likelihood Estimates: ## ## Fixed effects in the class-membership model: ## (the class of reference is the last class) ## ## coef Se Wald p-value ## intercept class1 1.60297 0.20813 7.702 0.00000 ## intercept class2 0.46935 0.31592 1.486 0.13738 ## intercept class3 -0.62593 0.31556 -1.984 0.04731 ## intercept class4 1.96928 3.89319 0.506 0.61298 ## intercept class5 1.78706 4.66863 0.383 0.70188 ## ## Fixed effects in the longitudinal model: ## ## coef Se Wald p-value ## intercept class1 7.05192 0.91689 7.691 0.00000 ## intercept class2 17.29622 1.14057 15.165 0.00000 ## intercept class3 19.54452 1.02641 19.042 0.00000 ## intercept class4 2.99013 0.33842 8.836 0.00000 ## intercept class5 2.99012 0.38516 7.763 0.00000 ## intercept class6 3.60755 0.92206 3.912 0.00009 ## ola class1 0.49308 0.29315 1.682 0.09257 ## ola class2 -2.12546 0.30066 -7.069 0.00000 ## ola class3 -0.59844 0.39191 -1.527 0.12677 ## ola class4 0.39012 0.11619 3.358 0.00079 ## ola class5 0.39012 0.13164 2.964 0.00304 ## ola class6 3.71429 0.33486 11.092 0.00000 ## ## coef Se ## Residual standard error: 4.08242 0.03853 pred_lcmm6_lin &lt;- predictY(lcmm6_lin, data.frame(ola = 1:4)) plot(pred_lcmm6_lin, ylim = c(0, 27)) "],["variables-modelo.html", "Capítulo 3 Variables modelo Agregar variables de trayectoria de los distintos modelos Agregar variables independientes 3.1 Crear y agregar trayectorias de variables independientes 3.2 Guardar datos para usar despues", " Capítulo 3 Variables modelo Agregar variables de trayectoria de los distintos modelos elsoc_salud_modelo &lt;- elsoc_salud elsoc_salud_modelo$trayectoria_gmm.4lin &lt;- factor(elsoc_salud %&gt;% left_join(lcmm4_lin$pprob %&gt;% select(idencuesta, class), by = &#39;idencuesta&#39;) %&gt;% pull(class), levels = c(3, 1, 2, 4), labels = c(&#39;Trayectoria asintomatica&#39;, &#39;Trayectoria sintomas moderados descendente&#39;, &#39;Trayectoria de sintomas ascendente&#39;, &#39;Trayectoria sintomas severos persistentes&#39;)) elsoc_salud_modelo$trayectoria_gmm.5lin &lt;- factor(elsoc_salud %&gt;% left_join(lcmm5_lin$pprob %&gt;% select(idencuesta, class), by = &#39;idencuesta&#39;) %&gt;% pull(class), levels = c(2, 4, 5, 3, 1), labels = c(&#39;Trayectoria baja-media&#39;, &#39;Trayectoria media-moderada&#39;, &#39;Trayectoria descendente&#39;, &#39;Trayectoria ascendente&#39;, &#39;Trayectoria alta-moderada&#39;)) sjmisc::frq(elsoc_salud_modelo$trayectoria_gmm.4lin) ## x &lt;categorical&gt; ## # total N=1789 valid N=1789 mean=1.43 sd=0.77 ## ## Value | N | Raw % | Valid % | Cum. % ## ---------------------------------------------------------------------------- ## Trayectoria asintomatica | 1258 | 70.32 | 70.32 | 70.32 ## Trayectoria sintomas moderados descendente | 364 | 20.35 | 20.35 | 90.67 ## Trayectoria de sintomas ascendente | 95 | 5.31 | 5.31 | 95.98 ## Trayectoria sintomas severos persistentes | 72 | 4.02 | 4.02 | 100.00 ## &lt;NA&gt; | 0 | 0.00 | &lt;NA&gt; | &lt;NA&gt; sjmisc::frq(elsoc_salud_modelo$trayectoria_gmm.5lin) ## x &lt;categorical&gt; ## # total N=1789 valid N=1789 mean=1.58 sd=0.97 ## ## Value | N | Raw % | Valid % | Cum. % ## ------------------------------------------------------------ ## Trayectoria baja-media | 1168 | 65.29 | 65.29 | 65.29 ## Trayectoria media-moderada | 375 | 20.96 | 20.96 | 86.25 ## Trayectoria descendente | 123 | 6.88 | 6.88 | 93.12 ## Trayectoria ascendente | 78 | 4.36 | 4.36 | 97.48 ## Trayectoria alta-moderada | 45 | 2.52 | 2.52 | 100.00 ## &lt;NA&gt; | 0 | 0.00 | &lt;NA&gt; | &lt;NA&gt; Agregar variables independientes elsoc_salud_modelo &lt;- elsoc_salud_modelo %&gt;% filter(!elsoc::is_nsnr(m30_w01, m30_w02, m30_w03, m30_w04, m30b_w05)) %&gt;% mutate( # Variables de ingreso: m30_w01 = 1000*as.numeric(car::recode(m30_w01, &quot;1 = 220; 2 = 250; 3 = 305; 4 = 355; 5 = 400; 6 = 445; 7 = 490; 8 = 535; 9 = 585; 10 = 640; 11 = 700; 12 = 765; 13 = 845; 14 = 935; 15 = 1040; 16 = 1180; 17 = 1375; 18 = 1670; 19 = 2275; 20 = 2700; NA = NA&quot;)), m29_w01_imp = ifelse(is_nsnr(m29_w01), m30_w01, m29_w01), ypc_w01 = m29_w01_imp / nhogar1_w01, m30_w02 = 1000*as.numeric(car::recode(m30_w02, &quot;1 = 220; 2 = 250; 3 = 305; 4 = 355; 5 = 400; 6 = 445; 7 = 490; 8 = 535; 9 = 585; 10 = 640; 11 = 700; 12 = 765; 13 = 845; 14 = 935; 15 = 1040; 16 = 1180; 17 = 1375; 18 = 1670; 19 = 2275; 20 = 2700; NA = NA&quot;)), m29_w02_imp = ifelse(is_nsnr(m29_w02), m30_w02, m29_w02), ypc_w02 = m29_w02_imp / nhogar1_w01, m30_w03 = 1000*as.numeric(car::recode(m30_w03, &quot;1 = 220; 2 = 250; 3 = 305; 4 = 355; 5 = 400; 6 = 445; 7 = 490; 8 = 535; 9 = 585; 10 = 640; 11 = 700; 12 = 765; 13 = 845; 14 = 935; 15 = 1040; 16 = 1180; 17 = 1375; 18 = 1670; 19 = 2275; 20 = 2700; NA = NA&quot;)), m29_w03_imp = ifelse(is_nsnr(m29_w03), m30_w03, m29_w03), ypc_w03 = m29_w03_imp / ifelse(is_nsnr(m54_w03), NA, m54_w03), m30_w04 = 1000*as.numeric(car::recode(m30_w04, &quot;1 = 220; 2 = 250; 3 = 305; 4 = 355; 5 = 400; 6 = 445; 7 = 490; 8 = 535; 9 = 585; 10 = 640; 11 = 700; 12 = 765; 13 = 845; 14 = 935; 15 = 1040; 16 = 1180; 17 = 1375; 18 = 1670; 19 = 2275; 20 = 2700; NA = NA&quot;)), m29_w04_imp = ifelse(is_nsnr(m29_w04), m30_w04, m29_w04), ypc_w04 = m29_w04_imp / ifelse(is_nsnr(m54_w04), NA, m54_w04), log_ing = log((ypc_w01 + ypc_w02 + ypc_w03 + ypc_w04)/5), quintil_w01 = statar::xtile(ypc_w01, n = 5, wt = ponderador02_w01), quintil_w01 = factor(quintil_w01, levels = 1:5, labels = glue::glue(&#39;Quintil {1:5}&#39;)), quintil_w02 = statar::xtile(ypc_w02, n = 5, wt = ponderador02_w02), quintil_w02 = factor(quintil_w02, levels = 1:5, labels = glue::glue(&#39;Quintil {1:5}&#39;)), quintil_w03 = statar::xtile(ypc_w03, n = 5, wt = ponderador02_w03), quintil_w03 = factor(quintil_w03, levels = 1:5, labels = glue::glue(&#39;Quintil {1:5}&#39;)), quintil_w04 = statar::xtile(ypc_w04, n = 5, wt = ponderador02_w04), quintil_w04 = factor(quintil_w04, levels = 1:5, labels = glue::glue(&#39;Quintil {1:5}&#39;)), # Nivel educacional: educ_w01 = factor(car::recode(m01_w01, recodes = &quot;1:3 = 1; 4:5 = 2; 6:7 = 3; 8:10 = 4&quot;), levels = 1:4, labels = c(&quot;Basica&quot;, &quot;Media&quot;, &quot;Tecnica&quot;, &quot;Universitaria&quot;)), # Situacion ocupacional: ocup_w01 = factor(car::recode(m02_w01, &quot;1:3 = 1; 6 = 2; c(4, 5, 8, 9) = 3; 7 = 4&quot;), levels = 1:4, labels = c(&#39;Ocupado&#39;, &#39;Desempleado&#39;, &#39;Inactivo&#39;, &#39;Trabajo no remunerado&#39;)), ocup_w02 = factor(car::recode(m02_w02, &quot;1:3 = 1; 6 = 2; c(4, 5, 8, 9) = 3; 7 = 4&quot;), levels = 1:4, labels = c(&#39;Ocupado&#39;, &#39;Desempleado&#39;, &#39;Inactivo&#39;, &#39;Trabajo no remunerado&#39;)), ocup_w03 = factor(car::recode(m02_w03, &quot;1:3 = 1; 6 = 2; c(4, 5, 8, 9) = 3; 7 = 4&quot;), levels = 1:4, labels = c(&#39;Ocupado&#39;, &#39;Desempleado&#39;, &#39;Inactivo&#39;, &#39;Trabajo no remunerado&#39;)), ocup_w04 = factor(car::recode(m02_w04, &quot;1:3 = 1; 6 = 2; c(4, 5, 8, 9) = 3; 7 = 4&quot;), levels = 1:4, labels = c(&#39;Ocupado&#39;, &#39;Desempleado&#39;, &#39;Inactivo&#39;, &#39;Trabajo no remunerado&#39;)), # Sobrecarga de deudas sobrecarga_deuda_w01 = factor(car::recode(m43_w01, &quot;1:2 = 1; 4:5 = 2; else = NA&quot;), labels = c(&#39;Nada/No muy sobrecargado&#39;, &#39;Bastante/Muy sobrecargado&#39;)), sobrecarga_deuda_w03 = factor(car::recode(m43_w03, &quot;1:2 = 1; 4:5 = 2; else = NA&quot;), labels = c(&#39;Nada/No muy sobrecargado&#39;, &#39;Bastante/Muy sobrecargado&#39;)), # Apoyo social apoyo_social_w01 = factor(car::recode(s12_w01, &quot;1:2 = 1; 3:4 = 2; 5 = 3&quot;), levels = 1:3, labels = c(&#39;Apoyo social bajo&#39;, &#39;Apoyo social medio&#39;, &#39;Apoyo social alto&#39;)), apoyo_social_w03 = factor(car::recode(s12_w03, &quot;1:2 = 1; 3:4 = 2; 5 = 3&quot;), levels = 1:3, labels = c(&#39;Apoyo social bajo&#39;, &#39;Apoyo social medio&#39;, &#39;Apoyo social alto&#39;)), # Actividad fisica regular activ_fisica_w01 = factor(s04_w01 %in% 1:3, labels = c(&#39;Sin actividad fisica regular&#39;, &#39;Con actividad fisica regular&#39;)), activ_fisica_w03 = factor(s04_w03 %in% 1:3, labels = c(&#39;Sin actividad fisica regular&#39;, &#39;Con actividad fisica regular&#39;)), # Estado de salud salud_w01 = factor(car::recode(s03_w01, &quot;1 = 1; 2:3 = 2; 4:5 = 3; else = NA&quot;), labels = c(&#39;Mala&#39;, &#39;Regular/buena&#39;, &#39;Muy buena/excelente&#39;)), salud_w02 = factor(car::recode(s03_w02, &quot;1 = 1; 2:3 = 2; 4:5 = 3; else = NA&quot;), labels = c(&#39;Mala&#39;, &#39;Regular/buena&#39;, &#39;Muy buena/excelente&#39;)), salud_w03 = factor(car::recode(s03_w03, &quot;1 = 1; 2:3 = 2; 4:5 = 3; else = NA&quot;), labels = c(&#39;Mala&#39;, &#39;Regular/buena&#39;, &#39;Muy buena/excelente&#39;)), salud_w04 = factor(car::recode(s03_w04, &quot;1 = 1; 2:3 = 2; 4:5 = 3; else = NA&quot;), labels = c(&#39;Mala&#39;, &#39;Regular/buena&#39;, &#39;Muy buena/excelente&#39;)), salud_w05 = factor(car::recode(s03_w05, &quot;1 = 1; 2:3 = 2; 4:5 = 3; else = NA&quot;), labels = c(&#39;Mala&#39;, &#39;Regular/buena&#39;, &#39;Muy buena/excelente&#39;)), # Fumador fuma_w01 = factor(s08_w01 &gt;= 1, labels = c(&#39;No fuma&#39;, &#39;Fumador&#39;)), fuma_w03 = factor(s08_w03 &gt;= 1, labels = c(&#39;No fuma&#39;, &#39;Fumador&#39;)), # IMC imc_w01 = ifelse(is_nsnr(s06_w01), NA, s06_w01) / (ifelse(is_nsnr(s05_w01), NA, s05_w01/100))^2, imc_w03 = ifelse(is_nsnr(s06_w03), NA, s06_w03) / (ifelse(is_nsnr(s05_w03), NA, s05_w03/100))^2, # Personalidad s22_01_w02 = ifelse(is_nsnr(s22_01_w02), NA, s22_01_w02), s22_02_w02 = ifelse(is_nsnr(s22_02_w02), NA, s22_02_w02), s22_03_w02 = ifelse(is_nsnr(s22_03_w02), NA, s22_03_w02), s22_04_w02 = ifelse(is_nsnr(s22_04_w02), NA, s22_04_w02), s22_05_w02 = ifelse(is_nsnr(s22_05_w02), NA, s22_05_w02), s22_06_w02 = ifelse(is_nsnr(s22_06_w02), NA, s22_06_w02), s22_07_w02 = ifelse(is_nsnr(s22_07_w02), NA, s22_07_w02), s22_08_w02 = ifelse(is_nsnr(s22_08_w02), NA, s22_08_w02), s22_09_w02 = ifelse(is_nsnr(s22_09_w02), NA, s22_09_w02), s22_10_w02 = ifelse(is_nsnr(s22_10_w02), NA, s22_10_w02), extraversion_w02 = 6 - (s22_01_w02) + s22_06_w02 , agreeableness_w02 = s22_02_w02 + 6 - s22_07_w02, conscientiousness_w02 = 6 - s22_03_w02 + s22_08_w02 , neuroticism_w02 = 6 - s22_04_w02 + s22_09_w02, openness_w02 = 6 - s22_05_w02 + s22_10_w02, # Direccion vida proyecto_vida_w03 = factor(s30_01_w03 %in% 4:5, labels = c(&#39;No decidido direccion de vida&#39;, &#39;Decidido direccion de vida&#39;)), # Desigualdad percibida percepcion_desigualdad_w01 = factor(c18_11_w01 %in% 4:5, labels = c(&#39;Desigualdad no muy grande&#39;, &#39;Desigualdad muy grande&#39;)), percepcion_desigualdad_w02 = factor(c18_11_w02 %in% 4:5, labels = c(&#39;Desigualdad no muy grande&#39;, &#39;Desigualdad muy grande&#39;)), percepcion_desigualdad_w03 = factor(c18_11_w03 %in% 4:5, labels = c(&#39;Desigualdad no muy grande&#39;, &#39;Desigualdad muy grande&#39;)), percepcion_desigualdad_w04 = factor(c18_11_w04 %in% 4:5, labels = c(&#39;Desigualdad no muy grande&#39;, &#39;Desigualdad muy grande&#39;)) ) 3.1 Crear y agregar trayectorias de variables independientes comparar_clusters &lt;- function(.data, vars, K = 10) { seq &lt;- TraMineR::seqdef(.data, var = vars, weights = .data$ponderador02_w01) dist &lt;- TraMineR::seqdist(seq, method = &quot;LCS&quot;, with.missing = TRUE) ward &lt;- cluster::agnes(dist, diss = TRUE, method = &#39;ward&#39;) # Comparar soluciones con diferentes numeros de trayectorias (se prueban de 2 a 10 clusters) ward.range &lt;- WeightedCluster::as.clustrange(ward, diss = dist, ncluster = K) # Visualizar clusters: ward.range$stats %&gt;% mutate(clusters = 2:10) %&gt;% pivot_longer(cols = c(ASWw, HG, PBC, HC), names_to = &#39;indicador&#39;, values_to = &#39;value&#39;) %&gt;% group_by(indicador) %&gt;% mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %&gt;% ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) + geom_line() + scale_x_continuous(breaks = 2:10) + ylab(&#39;Valor estandarizado&#39;) } trayectoria &lt;- function(.data, vars, K, olas = 2016:2019, MISSING = TRUE, ...) { seq &lt;- TraMineR::seqdef(.data, var = vars, ..., weights = .data$ponderador02_w01) dist &lt;- TraMineR::seqdist(seq, method = &quot;LCS&quot;, with.missing = MISSING) ward &lt;- cluster::agnes(dist, diss = TRUE, method = &#39;ward&#39;) TraMineR::seqIplot(seq, group = stats::cutree(ward, k = K), border = NA, space = 0, idxs = 0, xtlab = olas) TraMineR::seqdplot(seq, group = stats::cutree(ward, k = K), border = NA, space = 0) } Situacion ocupacional (4 categorias) comparar_clusters(elsoc_salud_modelo, vars = c(&#39;ocup_w01&#39;, &#39;ocup_w02&#39;, &#39;ocup_w03&#39;, &#39;ocup_w04&#39;)) trayectoria(elsoc_salud_modelo, vars = c(&#39;ocup_w01&#39;, &#39;ocup_w02&#39;, &#39;ocup_w03&#39;, &#39;ocup_w04&#39;), cpal = c(&#39;palevioletred3&#39;, &#39;khaki3&#39;, &#39;steelblue3&#39;, &#39;palegreen3&#39;), K = 3) trayectoria(elsoc_salud_modelo, vars = c(&#39;ocup_w01&#39;, &#39;ocup_w02&#39;, &#39;ocup_w03&#39;, &#39;ocup_w04&#39;), cpal = c(&#39;palevioletred3&#39;, &#39;khaki3&#39;, &#39;steelblue3&#39;, &#39;palegreen3&#39;), K = 5) trayectoria(elsoc_salud_modelo, vars = c(&#39;ocup_w01&#39;, &#39;ocup_w02&#39;, &#39;ocup_w03&#39;, &#39;ocup_w04&#39;), cpal = c(&#39;palevioletred3&#39;, &#39;khaki3&#39;, &#39;steelblue3&#39;, &#39;palegreen3&#39;), K = 6) trayectoria(elsoc_salud_modelo, vars = c(&#39;ocup_w01&#39;, &#39;ocup_w02&#39;, &#39;ocup_w03&#39;, &#39;ocup_w04&#39;), cpal = c(&#39;palevioletred3&#39;, &#39;khaki3&#39;, &#39;steelblue3&#39;, &#39;palegreen3&#39;), K = 7) # Agregar trayectoria de 6 clusters seq &lt;- TraMineR::seqdef(elsoc_salud_modelo, var = c(&#39;ocup_w01&#39;, &#39;ocup_w02&#39;, &#39;ocup_w03&#39;, &#39;ocup_w04&#39;), weights = elsoc_salud_modelo$ponderador02_w01) dist &lt;- TraMineR::seqdist(seq, method = &quot;LCS&quot;, with.missing = TRUE) ward &lt;- cluster::agnes(dist, diss = TRUE, method = &#39;ward&#39;) elsoc_salud_modelo$trayectoria_ocup &lt;- factor(stats::cutree(ward, k = 6), levels = c(3, 1, 4, 2, 5, 6), labels = c(&#39;Ocupados estables&#39;, &#39;Pasan de inactividad a ocupacion&#39;, &#39;Ocupados con periodos sin ocupacion&#39;, &#39;Mayoritariamente inactivos&#39;, &#39;Mayoritariamente trabajo no remunerado&#39;, &#39;Mayoritariamente desempleados&#39;)) Sobrecarga por deudas comparar_clusters(elsoc_salud_modelo, vars = c(&#39;sobrecarga_deuda_w01&#39;, &#39;sobrecarga_deuda_w03&#39;)) trayectoria(elsoc_salud_modelo, vars = c(&#39;sobrecarga_deuda_w01&#39;, &#39;sobrecarga_deuda_w03&#39;), olas = c(2016, 2018), cpal = c(&#39;palevioletred3&#39;, &#39;palegreen3&#39;), K = 4) trayectoria(elsoc_salud_modelo, vars = c(&#39;sobrecarga_deuda_w01&#39;, &#39;sobrecarga_deuda_w03&#39;), olas = c(2016, 2018), cpal = c(&#39;palevioletred3&#39;, &#39;palegreen3&#39;), K = 5) trayectoria(elsoc_salud_modelo, vars = c(&#39;sobrecarga_deuda_w01&#39;, &#39;sobrecarga_deuda_w03&#39;), olas = c(2016, 2018), cpal = c(&#39;palevioletred3&#39;, &#39;palegreen3&#39;), K = 6) # Agregar trayectoria de 3 clusters seq &lt;- TraMineR::seqdef(elsoc_salud_modelo, var = c(&#39;sobrecarga_deuda_w01&#39;, &#39;sobrecarga_deuda_w03&#39;), weights = elsoc_salud_modelo$ponderador02_w01) dist &lt;- TraMineR::seqdist(seq, method = &quot;LCS&quot;, with.missing = TRUE) ward &lt;- cluster::agnes(dist, diss = TRUE, method = &#39;ward&#39;) elsoc_salud_modelo$trayectoria_deuda &lt;- factor(stats::cutree(ward, k = 5), levels = c(4, 3, 1, 2), labels = c(&#39;Nada/No muy sobrecargados deuda&#39;, &#39;Reduccion sobrecarga deuda&#39;, &#39;Aumento sobrecarga deuda&#39;, &#39;Bastante/muy sobrecargados deuda&#39;)) Actividad fisica regular comparar_clusters(elsoc_salud_modelo, vars = c(&#39;activ_fisica_w01&#39;, &#39;activ_fisica_w03&#39;)) trayectoria(elsoc_salud_modelo, vars = c(&#39;activ_fisica_w01&#39;, &#39;activ_fisica_w03&#39;), olas = c(2016, 2018), cpal = c(&#39;palegreen3&#39;, &#39;palevioletred3&#39;), K = 2) trayectoria(elsoc_salud_modelo, vars = c(&#39;activ_fisica_w01&#39;, &#39;activ_fisica_w03&#39;), olas = c(2016, 2018), cpal = c(&#39;palegreen3&#39;, &#39;palevioletred3&#39;), K = 4) trayectoria(elsoc_salud_modelo, vars = c(&#39;activ_fisica_w01&#39;, &#39;activ_fisica_w03&#39;), olas = c(2016, 2018), cpal = c(&#39;palegreen3&#39;, &#39;palevioletred3&#39;), K = 5) # Agregar trayectoria de 3 clusters seq &lt;- TraMineR::seqdef(elsoc_salud_modelo, var = c(&#39;activ_fisica_w01&#39;, &#39;activ_fisica_w03&#39;), weights = elsoc_salud_modelo$ponderador02_w01) dist &lt;- TraMineR::seqdist(seq, method = &quot;LCS&quot;, with.missing = TRUE) ward &lt;- cluster::agnes(dist, diss = TRUE, method = &#39;ward&#39;) elsoc_salud_modelo$trayectoria_activ_fisica &lt;- factor(stats::cutree(ward, k = 4), levels = c(2, 3, 4, 1), labels = c(&#39;Sin actividad fisica persistente&#39;, &#39;Abandonan actividad fisica en 2021&#39;, &#39;Se activan en 2021&#39;, &#39;Con actividad fisica persistente&#39;)) Apoyo social comparar_clusters(elsoc_salud_modelo, vars = c(&#39;apoyo_social_w01&#39;, &#39;apoyo_social_w03&#39;)) trayectoria(elsoc_salud_modelo, vars = c(&#39;apoyo_social_w01&#39;, &#39;apoyo_social_w03&#39;), cpal = c(&#39;palegreen3&#39;, &#39;palevioletred3&#39;, &#39;khaki3&#39;), olas = c(2016, 2018), K = 4) trayectoria(elsoc_salud_modelo, vars = c(&#39;apoyo_social_w01&#39;, &#39;apoyo_social_w03&#39;), cpal = c(&#39;palegreen3&#39;, &#39;palevioletred3&#39;, &#39;khaki3&#39;), olas = c(2016, 2018), K = 5) # Agregar trayectoria de 3 clusters seq &lt;- TraMineR::seqdef(elsoc_salud_modelo, var = c(&#39;apoyo_social_w01&#39;, &#39;apoyo_social_w03&#39;), weights = elsoc_salud_modelo$ponderador02_w01) dist &lt;- TraMineR::seqdist(seq, method = &quot;LCS&quot;, with.missing = TRUE) ward &lt;- cluster::agnes(dist, diss = TRUE, method = &#39;ward&#39;) elsoc_salud_modelo$trayectoria_apoyo_social &lt;- factor(stats::cutree(ward, k = 5), levels = c(5, 4, 2, 1, 3), labels = c(&#39;Apoyo social estable&#39;, &#39;Apoyo social/decreciente&#39;, &#39;Apoyo social medio&#39;, &#39;Apoyo social cambiante&#39;, &#39;Sin apoyo social&#39;)) Salud subjetiva comparar_clusters(elsoc_salud_modelo, vars = c(&#39;salud_w01&#39;, &#39;salud_w02&#39;, &#39;salud_w03&#39;, &#39;salud_w04&#39;, &#39;salud_w05&#39;)) trayectoria(elsoc_salud_modelo, vars = c(&#39;salud_w01&#39;, &#39;salud_w02&#39;, &#39;salud_w03&#39;, &#39;salud_w04&#39;, &#39;salud_w05&#39;), cpal = c(&#39;palevioletred3&#39;, &#39;palegreen3&#39;, &#39;khaki3&#39;), K = 3) trayectoria(elsoc_salud_modelo, vars = c(&#39;salud_w01&#39;, &#39;salud_w02&#39;, &#39;salud_w03&#39;, &#39;salud_w04&#39;, &#39;salud_w05&#39;), cpal = c(&#39;palevioletred3&#39;, &#39;palegreen3&#39;, &#39;khaki3&#39;), K = 4) trayectoria(elsoc_salud_modelo, vars = c(&#39;salud_w01&#39;, &#39;salud_w02&#39;, &#39;salud_w03&#39;, &#39;salud_w04&#39;, &#39;salud_w05&#39;), cpal = c(&#39;palevioletred3&#39;, &#39;palegreen3&#39;, &#39;khaki3&#39;), K = 5) # Agregar trayectoria de 3 clusters seq &lt;- TraMineR::seqdef(elsoc_salud_modelo, var = c(&#39;salud_w01&#39;, &#39;salud_w02&#39;, &#39;salud_w03&#39;, &#39;salud_w04&#39;, &#39;salud_w05&#39;), weights = elsoc_salud_modelo$ponderador02_w01) dist &lt;- TraMineR::seqdist(seq, method = &quot;LCS&quot;, with.missing = TRUE) ward &lt;- cluster::agnes(dist, diss = TRUE, method = &#39;ward&#39;) elsoc_salud_modelo$trayectoria_salud &lt;- factor(stats::cutree(ward, k = 4), levels = c(4, 3, 2, 1), labels = c(&#39;Salud subjetiva muy buena&#39;, &#39;Salud subjetiva regular/muy buena&#39;, &#39;Salud subjetiva regular&#39;, &#39;Salud subjetiva mala/regular&#39;)) 3.2 Guardar datos para usar despues save(elsoc_salud_modelo, file = &#39;datos_salud_modelo.RData&#39;) # sjlabelled::write_stata(x = elsoc_salud_modelo %&gt;% # rename(trayectoria_om4_4 = trayectoria_om4.4, # trayectoria_om4_5 = trayectoria_om4.5, # trayectoria_gmm_4lin = trayectoria_gmm.4lin, # trayectoria_gmm_5lin = trayectoria_gmm.5lin # ), # path = &#39;datos_salud_modelo.dta&#39;) "],["modelo-multinomial-logit.html", "Capítulo 4 Modelo multinomial logit 4.1 Comparación trayectorias 4.2 Variable dependiente: Trayectorias LCMM 4 clases - sin trayectoria salud subjetiva 4.3 Resultados en formato grafico", " Capítulo 4 Modelo multinomial logit load(&#39;datos_salud_modelo.RData&#39;) 4.1 Comparación trayectorias with(elsoc_salud_modelo, rcompanion::cramerV(trayectoria_gmm.4lin, trayectoria_gmm.5lin, bias.correct = TRUE)) ## Cramer V ## 0.8303 4.2 Variable dependiente: Trayectorias LCMM 4 clases - sin trayectoria salud subjetiva m1 &lt;- elsoc_salud_modelo %&gt;% multinom(trayectoria_gmm.4lin ~ m0_sexo_w01 + m0_edad_w01 + log_ing + trayectoria_deuda + trayectoria_apoyo_social + trayectoria_ocup, data = ., weights = ponderador02_w01, quiet = TRUE) ## # weights: 68 (48 variable) ## initial value 1734.839267 ## iter 10 value 1230.496745 ## iter 20 value 1049.261665 ## iter 30 value 971.652390 ## iter 40 value 969.341352 ## final value 969.339477 ## converged m2 &lt;- elsoc_salud_modelo %&gt;% multinom(trayectoria_gmm.4lin ~ m0_sexo_w01 + m0_edad_w01 + log_ing + trayectoria_deuda + trayectoria_apoyo_social + trayectoria_ocup + fuma_w01 + imc_w01 + proyecto_vida_w03, data = ., weights = ponderador02_w01, quiet = TRUE) ## # weights: 80 (57 variable) ## initial value 1608.712819 ## iter 10 value 1520.391440 ## iter 20 value 1029.601126 ## iter 30 value 933.763897 ## iter 40 value 872.694813 ## iter 50 value 871.772222 ## iter 60 value 871.720515 ## iter 70 value 871.717839 ## iter 70 value 871.717833 ## iter 70 value 871.717833 ## final value 871.717833 ## converged m3 &lt;- elsoc_salud_modelo %&gt;% multinom(trayectoria_gmm.4lin ~ m0_sexo_w01 + m0_edad_w01 + log_ing + trayectoria_deuda + trayectoria_apoyo_social + trayectoria_ocup + fuma_w01 + imc_w01 + proyecto_vida_w03 + extraversion_w02 + agreeableness_w02 + conscientiousness_w02 + neuroticism_w02 + openness_w02, data = ., weights = ponderador02_w01, quiet = TRUE) ## # weights: 100 (72 variable) ## initial value 1591.597629 ## iter 10 value 1388.652051 ## iter 20 value 1063.758303 ## iter 30 value 914.155567 ## iter 40 value 861.653311 ## iter 50 value 804.926837 ## iter 60 value 802.664504 ## iter 70 value 802.647857 ## iter 80 value 802.646595 ## final value 802.646519 ## converged modelsummary::modelsummary(list(m1, m2, m3), estimate = &quot;{estimate}{stars}&quot;, statistic = NULL, stars = c(&#39;*&#39; = .05, &#39;**&#39; = .01, &#39;***&#39; = .001), shape = term + response ~ model, exponentiate = TRUE, output = &#39;resultados.docx&#39;) 4.3 Resultados en formato grafico m3.coefs &lt;- broom::tidy(m3, conf.int=TRUE) Variables de control m3.coefs %&gt;% filter(term %in% c(&#39;m0_sexo_w01&#39;, &#39;m0_edad_w01&#39;, &#39;log_ing&#39;, &#39;proyecto_vida_w03Decidido direccion de vida&#39;, &#39;fuma_w01Fumador&#39;, &#39;imc_w01&#39;)) %&gt;% mutate(estimate = exp(estimate), conf.low = exp(conf.low), conf.high = exp(conf.high), term = factor(term, levels = c(&#39;m0_sexo_w01&#39;, &#39;m0_edad_w01&#39;, &#39;log_ing&#39;, &#39;proyecto_vida_w03Decidido direccion de vida&#39;, &#39;fuma_w01Fumador&#39;, &#39;imc_w01&#39;), labels = c(&#39;Sexo (mujer=1)&#39;, &#39;Edad&#39;, &#39;Log(ing)&#39;, &#39;Decidido direccion\\nde vida&#39;, &#39;IMC&#39;, &#39;Fuma&#39;)), y.level = gsub(&#39;Trayectoria sintomas&#39;, &#39;Trayectoria sintomas\\n&#39;, y.level)) %&gt;% ggplot(aes(x = estimate, y = fct_rev(term), colour = fct_rev(y.level))) + geom_pointrangeh(aes(xmin = conf.low, xmax = conf.high), position = position_dodgev(height = 0.75)) + geom_vline(xintercept = c(0, 1), linetype = 2, alpha = .5) + scale_color_discrete(guide = guide_legend(reverse = TRUE)) + theme(legend.position = &#39;top&#39;) + theme(legend.title = element_blank()) + xlab(&#39;Odds Ratio&#39;) + ylab(NULL) Trayectoria sobrecarga deuda m3.coefs %&gt;% filter(grepl(&#39;trayectoria_deuda&#39;, term)) %&gt;% mutate(estimate = exp(estimate), conf.low = exp(conf.low), conf.high = exp(conf.high), term = gsub(&quot;trayectoria_deuda&quot;, &quot;&quot;, term), y.level = gsub(&#39;Trayectoria sintomas&#39;, &#39;Trayectoria sintomas\\n&#39;, y.level)) %&gt;% ggplot(aes(x = estimate, y = term, colour = fct_rev(y.level))) + geom_pointrangeh(aes(xmin = conf.low, xmax = conf.high), position = position_dodgev(height = 0.75)) + geom_vline(xintercept = c(0, 1), linetype = 2, alpha = .5) + scale_color_discrete(guide = guide_legend(reverse = TRUE)) + theme(legend.position = &#39;top&#39;) + theme(legend.title = element_blank()) + xlab(&#39;Odds Ratio&#39;) + ylab(NULL) Apoyo social m3.coefs %&gt;% filter(grepl(&#39;apoyo_social&#39;, term)) %&gt;% mutate(estimate = exp(estimate), conf.low = exp(conf.low), conf.high = exp(conf.high), term = gsub(&quot;trayectoria_apoyo_social&quot;, &quot;&quot;, term), y.level = gsub(&#39;Trayectoria sintomas&#39;, &#39;Trayectoria sintomas\\n&#39;, y.level)) %&gt;% ggplot(aes(x = estimate, y = term, colour = fct_rev(y.level))) + geom_pointrangeh(aes(xmin = conf.low, xmax = conf.high), position = position_dodgev(height = 0.75)) + geom_vline(xintercept = c(0, 1), linetype = 2, alpha = .5) + scale_color_discrete(guide = guide_legend(reverse = TRUE)) + theme(legend.position = &#39;top&#39;) + theme(legend.title = element_blank()) + xlab(&#39;Odds Ratio&#39;) + ylab(NULL) Trayectoria ocupacional m3.coefs %&gt;% filter(grepl(&#39;ocup&#39;, term)) %&gt;% mutate(estimate = exp(estimate), conf.low = exp(conf.low), conf.high = exp(conf.high), term = gsub(&quot;trayectoria_ocup&quot;, &quot;&quot;, term), y.level = gsub(&#39;Trayectoria sintomas&#39;, &#39;Trayectoria sintomas\\n&#39;, y.level)) %&gt;% ggplot(aes(x = estimate, y = term, colour = fct_rev(y.level))) + geom_pointrangeh(aes(xmin = conf.low, xmax = conf.high), position = position_dodgev(height = 0.75)) + geom_vline(xintercept = c(0, 1), linetype = 2, alpha = .5) + scale_color_discrete(guide = guide_legend(reverse = TRUE)) + theme(legend.position = &#39;top&#39;) + theme(legend.title = element_blank()) + xlab(&#39;Odds Ratio&#39;) + ylab(NULL) Variables de personalidad m3.coefs %&gt;% filter(term %in% c(&#39;extraversion_w02&#39;, &#39;agreeableness_w02&#39;, &#39;conscientiousness_w02&#39;, &#39;neuroticism_w02&#39;, &#39;openness_w02&#39;)) %&gt;% mutate(estimate = exp(estimate), conf.low = exp(conf.low), conf.high = exp(conf.high), term = str_to_title(gsub(&quot;_w02&quot;, &quot;&quot;, term)), y.level = gsub(&#39;Trayectoria sintomas&#39;, &#39;Trayectoria sintomas\\n&#39;, y.level)) %&gt;% ggplot(aes(x = estimate, y = term, colour = fct_rev(y.level))) + geom_pointrangeh(aes(xmin = conf.low, xmax = conf.high), position = position_dodgev(height = 0.75)) + geom_vline(xintercept = c(0, 1), linetype = 2, alpha = .5) + scale_color_discrete(guide = guide_legend(reverse = TRUE)) + theme(legend.position = &#39;top&#39;) + theme(legend.title = element_blank()) + xlab(&#39;Odds Ratio&#39;) + ylab(NULL) mfx &lt;- marginaleffects(m3, type = &quot;probs&quot;) asd &lt;- summary(mfx) asd %&gt;% ggplot(aes(x = estimate, y = term, colour = fct_rev(group))) + geom_pointrangeh(aes(xmin = conf.low, xmax = conf.high), position = position_dodgev(height = 0.75)) + theme(legend.position = &#39;top&#39;) + theme(legend.title = element_blank()) + xlab(&#39;Odds Ratio&#39;) elsoc_salud_long %&gt;% left_join(elsoc_salud_modelo %&gt;% select(idencuesta, trayectoria_ocup), by = &#39;idencuesta&#39;) %&gt;% filter(trayectoria_ocup == &#39;Oscilan entre inactividad y ocupacion&#39;) %&gt;% filter(!elsoc::is_nsnr(m02)) %&gt;% mutate(m02 = factor(m02, levels = 1:9, labels = c(&#39;Trabajo remunerado\\ntiempo completo&#39;, &#39;Trabajo remunerado\\ntiempo parcial/ocasional&#39;, &#39;Estudia y trabaja&#39;, &#39;Solo estudia&#39;, &#39;Jubilado o\\npensionado&#39;, &#39;Desempleado&#39;, &#39;Trabajo no\\nremunerado&#39;, &#39;Enfermo o\\ndiscapacidad&#39;, &#39;otro&#39;))) %&gt;% sjlabelled::as_label(ola) %&gt;% elsoc::prop(m02, by = c(ola) , na.rm = TRUE) %&gt;% ggplot(aes(y = prop, x = ola, fill = m02)) + geom_col(position = &#39;stack&#39;) + theme(legend.position = &#39;top&#39;, legend.title = element_blank()) Trayectorias según clasificación elsoc_salud_long %&gt;% left_join(elsoc_salud_modelo %&gt;% select(idencuesta, trayectoria_gmm.4lin), by = &#39;idencuesta&#39;) %&gt;% filter(!is.na(trayectoria_gmm.4lin)) %&gt;% group_by(trayectoria_gmm.4lin) %&gt;% sjlabelled::as_label(ola) %&gt;% ggplot(aes(y = phq9, x = ola, group = idencuesta, color = trayectoria_gmm.4lin)) + facet_wrap(~trayectoria_gmm.4lin) + geom_line(alpha = .25) + geom_point(alpha = .25) + geom_hline(yintercept = 10, linetype = 2) + scale_y_continuous(limits = c(0, 27)) + theme(legend.position = &#39;none&#39;) + ylab(&#39;Indice PHQ-9&#39;) + xlab(NULL) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
