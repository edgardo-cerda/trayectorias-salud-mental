# Crear objeto con secuencias
seq.depr <- TraMineR::seqdef(elsoc_salud,
var = c('depr4_w01', 'depr4_w02', 'depr4_w03', 'depr4_w04', 'depr4_w05'),
states = c('Sin síntomas', 'Síntomas medios', 'Síntomas moderados', 'Síntomas severos'),
labels = c('Sin', 'medio', 'mod', 'sev'),
cpal = colsc('lightgreen', 'mediumturquoise', 'skyblue3', 'slateblue4')_depr)
knitr::opts_chunk$set(echo = TRUE)
# Librerías básicas
library(tidyverse)
library(sjlabelled)
# Librerias análisis de secuencia
library(TraMineR)
library(TraMineRextras)
library(WeightedCluster)
library(cluster)
# Librería ELSOC
library(elsoc)
# Cargar datos ELSOC:
elsoc::load_elsoc(data = 'wide')
# Crear variables de sintomatología depresiva por ola:
elsoc_salud <- elsoc_wide_2016_2021 %>%
# Se conservan observaciones presentes en las 5 olas
filter(tipo_atricion == 1) %>%
# Crear variables de PHQ9
purrr::map_at(.at = vars(starts_with('s11_0')),
.f = function(s) car::recode(s, "1 = 0; 2 = 1; 3 = 2; c(4, 5) = 3; c(-888, -999) = NA")) %>%
as.data.frame() %>%
mutate(phq9_w01 = (s11_01_w01 + s11_02_w01 + s11_03_w01 + s11_04_w01 + s11_05_w01 + s11_06_w01 + s11_07_w01 + s11_08_w01 + s11_09_w01),
phq9_w02 = (s11_01_w02 + s11_02_w02 + s11_03_w02 + s11_04_w02 + s11_05_w02 + s11_06_w02 + s11_07_w02 + s11_08_w02 + s11_09_w02),
phq9_w03 = (s11_01_w03 + s11_02_w03 + s11_03_w03 + s11_04_w03 + s11_05_w03 + s11_06_w03 + s11_07_w03 + s11_08_w03 + s11_09_w03),
phq9_w04 = (s11_01_w04 + s11_02_w04 + s11_03_w04 + s11_04_w04 + s11_05_w04 + s11_06_w04 + s11_07_w04 + s11_08_w04 + s11_09_w04),
phq9_w05 = (s11_01_w05 + s11_02_w05 + s11_03_w05 + s11_04_w05 + s11_05_w05 + s11_06_w05 + s11_07_w05 + s11_08_w05 + s11_09_w05)) %>%
# Quitar NAs
filter(!is.na(phq9_w01), !is.na(phq9_w02), !is.na(phq9_w03), !is.na(phq9_w04), !is.na(phq9_w05)) %>%
# Crear indicador de depresión en 4 y en 2 categorías:
mutate(depr4_w01 = car::recode(phq9_w01, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w02 = car::recode(phq9_w02, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w03 = car::recode(phq9_w03, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w04 = car::recode(phq9_w04, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w05 = car::recode(phq9_w05, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr_w01 = car::recode(phq9_w01, "0:9 = 0; 10:27 = 1"),
depr_w02 = car::recode(phq9_w02, "0:9 = 0; 10:27 = 1"),
depr_w03 = car::recode(phq9_w03, "0:9 = 0; 10:27 = 1"),
depr_w04 = car::recode(phq9_w04, "0:9 = 0; 10:27 = 1"),
depr_w05 = car::recode(phq9_w05, "0:9 = 0; 10:27 = 1")
)
# Crear objeto con secuencias
seq.depr <- TraMineR::seqdef(elsoc_salud,
var = c('depr4_w01', 'depr4_w02', 'depr4_w03', 'depr4_w04', 'depr4_w05'),
states = c('Sin síntomas', 'Síntomas medios', 'Síntomas moderados', 'Síntomas severos'),
labels = c('Sin', 'medio', 'mod', 'sev'),
cpal = colsc('lightgreen', 'mediumturquoise', 'skyblue3', 'slateblue4')_depr)
# Crear objeto con secuencias
seq.depr <- TraMineR::seqdef(elsoc_salud,
var = c('depr4_w01', 'depr4_w02', 'depr4_w03', 'depr4_w04', 'depr4_w05'),
states = c('Sin síntomas', 'Síntomas medios', 'Síntomas moderados', 'Síntomas severos'),
labels = c('Sin', 'medio', 'mod', 'sev'),
cpal = colsc('lightgreen', 'mediumturquoise', 'skyblue3', 'slateblue4'))
# Colores para indicadores de variables
cols_depr <-
# Crear objeto con secuencias
seq.depr <- TraMineR::seqdef(elsoc_salud,
var = c('depr4_w01', 'depr4_w02', 'depr4_w03', 'depr4_w04', 'depr4_w05'),
states = c('Sin síntomas', 'Síntomas medios', 'Síntomas moderados', 'Síntomas severos'),
labels = c('Sin', 'medio', 'mod', 'sev'),
cpal = c('lightgreen', 'mediumturquoise', 'skyblue3', 'slateblue4'))
# Crear objeto con secuencias
seq.depr <- TraMineR::seqdef(elsoc_salud,
var = c('depr4_w01', 'depr4_w02', 'depr4_w03', 'depr4_w04', 'depr4_w05'),
states = c('Sin síntomas', 'Síntomas medios', 'Síntomas moderados', 'Síntomas severos'),
labels = c('Sin', 'medio', 'mod', 'sev'),
cpal = c('lightgreen', 'mediumturquoise', 'skyblue3', 'slateblue4'))
# Crear objeto con secuencias
seq.depr <- TraMineR::seqdef(elsoc_salud,
var = c('depr4_w01', 'depr4_w02', 'depr4_w03', 'depr4_w04', 'depr4_w05'),
states = c('Sin síntomas', 'Síntomas medios', 'Síntomas moderados', 'Síntomas severos'),
labels = c('Sin', 'medio', 'mod', 'sev'),
cpal = c('lightgreen', 'mediumturquoise', 'skyblue3', 'slateblue4'))
# Crear objeto con secuencias
seq.depr <- TraMineR::seqdef(elsoc_salud,
var = c('depr4_w01', 'depr4_w02', 'depr4_w03', 'depr4_w04', 'depr4_w05'),
states = c('Sin síntomas', 'Síntomas medios', 'Síntomas moderados', 'Síntomas severos'),
cpal = c('lightgreen', 'mediumturquoise', 'skyblue3', 'slateblue4'))
# Medir distancias entre secuencias usando analisis de secuencias usando optimal matching analysis
dist.depr <- TraMineR::seqdist(seq.depr,
method = "OM",
sm = "CONSTANT")
?cutree
knitr::opts_chunk$set(echo = TRUE)
# Librerías básicas
library(tidyverse)
library(sjlabelled)
# Librerias análisis de secuencia
library(TraMineR)
library(TraMineRextras)
library(WeightedCluster)
library(cluster)
# Librería ELSOC
library(elsoc)
# Cargar datos ELSOC:
elsoc::load_elsoc(data = 'wide')
# Crear variables de sintomatología depresiva por ola:
elsoc_salud <- elsoc_wide_2016_2021 %>%
# Se conservan observaciones presentes en las 5 olas
filter(tipo_atricion == 1) %>%
# Crear variables de PHQ9
purrr::map_at(.at = vars(starts_with('s11_0')),
.f = function(s) car::recode(s, "1 = 0; 2 = 1; 3 = 2; c(4, 5) = 3; c(-888, -999) = NA")) %>%
as.data.frame() %>%
mutate(phq9_w01 = (s11_01_w01 + s11_02_w01 + s11_03_w01 + s11_04_w01 + s11_05_w01 + s11_06_w01 + s11_07_w01 + s11_08_w01 + s11_09_w01),
phq9_w02 = (s11_01_w02 + s11_02_w02 + s11_03_w02 + s11_04_w02 + s11_05_w02 + s11_06_w02 + s11_07_w02 + s11_08_w02 + s11_09_w02),
phq9_w03 = (s11_01_w03 + s11_02_w03 + s11_03_w03 + s11_04_w03 + s11_05_w03 + s11_06_w03 + s11_07_w03 + s11_08_w03 + s11_09_w03),
phq9_w04 = (s11_01_w04 + s11_02_w04 + s11_03_w04 + s11_04_w04 + s11_05_w04 + s11_06_w04 + s11_07_w04 + s11_08_w04 + s11_09_w04),
phq9_w05 = (s11_01_w05 + s11_02_w05 + s11_03_w05 + s11_04_w05 + s11_05_w05 + s11_06_w05 + s11_07_w05 + s11_08_w05 + s11_09_w05)) %>%
# Quitar NAs
filter(!is.na(phq9_w01), !is.na(phq9_w02), !is.na(phq9_w03), !is.na(phq9_w04), !is.na(phq9_w05)) %>%
# Crear indicador de depresión en 4 y en 2 categorías:
mutate(depr4_w01 = car::recode(phq9_w01, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w02 = car::recode(phq9_w02, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w03 = car::recode(phq9_w03, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w04 = car::recode(phq9_w04, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w05 = car::recode(phq9_w05, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr_w01 = car::recode(phq9_w01, "0:9 = 0; 10:27 = 1"),
depr_w02 = car::recode(phq9_w02, "0:9 = 0; 10:27 = 1"),
depr_w03 = car::recode(phq9_w03, "0:9 = 0; 10:27 = 1"),
depr_w04 = car::recode(phq9_w04, "0:9 = 0; 10:27 = 1"),
depr_w05 = car::recode(phq9_w05, "0:9 = 0; 10:27 = 1")
)
# Crear objeto con secuencias
seq.depr4 <- TraMineR::seqdef(elsoc_salud,
var = c('depr4_w01', 'depr4_w02', 'depr4_w03', 'depr4_w04', 'depr4_w05'),
states = c('Sin síntomas', 'Síntomas medios', 'Síntomas moderados', 'Síntomas severos'),
cpal = c('lightgreen', 'mediumturquoise', 'skyblue3', 'slateblue4'))
# Medir distancias entre secuencias usando analisis de secuencias usando optimal matching analysis
dist.depr4 <- TraMineR::seqdist(seq.depr4,
method = "OM",
sm = "CONSTANT")
# Construir tipos de trayectorias con analisis de cluster jerarquico Ward
ward.depr4 <- stats::hclust(as.dist(dist.depr4),
method = "ward.D")
# Comparar soluciones con diferentes numeros de trayectorias (se prueban de 1 a 15 clusters)
ward.range.depr4 <- WeightedCluster::as.clustrange(ward.depr4,
diss = dist.depr4,
ncluster = 32)
# Visualizar clusters:
plot(ward.range.depr4,
stat = c("ASW","ASWw", "HG", "PBC", "HC"), norm="zscore")
# Revision de soluciones con 5 tipos
ward.depr4.5 <- stats::cutree(ward.depr4, k = 5)
seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
seqIplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), sortv = "from.start", xlab = "Tiempo")
seqmtplot(seq.depr4, group = ward.depr4.5, xlab = "Estatus")
# Crear objeto con secuencias
seq.depr2 <- TraMineR::seqdef(elsoc_salud,
var = c('depr2_w01', 'depr2_w02', 'depr2_w03', 'depr2_w04', 'depr2_w05'),
states = c('Sin síntomas a medios', 'Síntomas moderados a severos'),
cpal = c('mediumturquoise', 'slateblue4'))
# Crear variables de sintomatología depresiva por ola:
elsoc_salud <- elsoc_wide_2016_2021 %>%
# Se conservan observaciones presentes en las 5 olas
filter(tipo_atricion == 1) %>%
# Crear variables de PHQ9
purrr::map_at(.at = vars(starts_with('s11_0')),
.f = function(s) car::recode(s, "1 = 0; 2 = 1; 3 = 2; c(4, 5) = 3; c(-888, -999) = NA")) %>%
as.data.frame() %>%
mutate(phq9_w01 = (s11_01_w01 + s11_02_w01 + s11_03_w01 + s11_04_w01 + s11_05_w01 + s11_06_w01 + s11_07_w01 + s11_08_w01 + s11_09_w01),
phq9_w02 = (s11_01_w02 + s11_02_w02 + s11_03_w02 + s11_04_w02 + s11_05_w02 + s11_06_w02 + s11_07_w02 + s11_08_w02 + s11_09_w02),
phq9_w03 = (s11_01_w03 + s11_02_w03 + s11_03_w03 + s11_04_w03 + s11_05_w03 + s11_06_w03 + s11_07_w03 + s11_08_w03 + s11_09_w03),
phq9_w04 = (s11_01_w04 + s11_02_w04 + s11_03_w04 + s11_04_w04 + s11_05_w04 + s11_06_w04 + s11_07_w04 + s11_08_w04 + s11_09_w04),
phq9_w05 = (s11_01_w05 + s11_02_w05 + s11_03_w05 + s11_04_w05 + s11_05_w05 + s11_06_w05 + s11_07_w05 + s11_08_w05 + s11_09_w05)) %>%
# Quitar NAs
filter(!is.na(phq9_w01), !is.na(phq9_w02), !is.na(phq9_w03), !is.na(phq9_w04), !is.na(phq9_w05)) %>%
# Crear indicador de depresión en 4 y en 2 categorías:
mutate(depr4_w01 = car::recode(phq9_w01, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w02 = car::recode(phq9_w02, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w03 = car::recode(phq9_w03, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w04 = car::recode(phq9_w04, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w05 = car::recode(phq9_w05, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr2_w01 = car::recode(phq9_w01, "0:9 = 0; 10:27 = 1"),
depr2_w02 = car::recode(phq9_w02, "0:9 = 0; 10:27 = 1"),
depr2_w03 = car::recode(phq9_w03, "0:9 = 0; 10:27 = 1"),
depr2_w04 = car::recode(phq9_w04, "0:9 = 0; 10:27 = 1"),
depr2_w05 = car::recode(phq9_w05, "0:9 = 0; 10:27 = 1")
)
# Crear objeto con secuencias
seq.depr2 <- TraMineR::seqdef(elsoc_salud,
var = c('depr2_w01', 'depr2_w02', 'depr2_w03', 'depr2_w04', 'depr2_w05'),
states = c('Sin síntomas a medios', 'Síntomas moderados a severos'),
cpal = c('mediumturquoise', 'slateblue4'))
# Medir distancias entre secuencias usando analisis de secuencias usando optimal matching analysis
dist.depr2 <- TraMineR::seqdist(seq.depr2,
method = "OM",
sm = "CONSTANT")
# Construir tipos de trayectorias con analisis de cluster jerarquico Ward
ward.depr2 <- stats::hclust(as.dist(dist.depr2),
method = "ward.D")
# Comparar soluciones con diferentes numeros de trayectorias (se prueban de 1 a 15 clusters)
ward.range.depr2 <- WeightedCluster::as.clustrange(ward.depr2,
diss = dist.depr2,
ncluster = 32)
# Visualizar clusters:
plot(ward.range.depr2,
stat = c("ASW","ASWw", "HG", "PBC", "HC"), norm="zscore")
# Revision de soluciones con 5 tipos
ward.depr2.5 <- stats::cutree(ward.depr2, k = 5)
seqdplot(seq.depr2, group = ward.depr2.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
seqIplot(seq.depr2, group = ward.depr2.5, xtlab = c(2016:2019, 2021), sortv = "from.start", xlab = "Tiempo")
seqmtplot(seq.depr2, group = ward.depr2.5, xlab = "Estatus")
# Revision de soluciones con 5 tipos
ward.depr2.5 <- stats::cutree(ward.depr2, k = 6)
seqdplot(seq.depr2, group = ward.depr2.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
seqIplot(seq.depr2, group = ward.depr2.5, xtlab = c(2016:2019, 2021), sortv = "from.start", xlab = "Tiempo")
seqmtplot(seq.depr2, group = ward.depr2.5, xlab = "Estatus")
# Revision de soluciones con 5 tipos
ward.depr2.5 <- stats::cutree(ward.depr2, k = 7)
seqdplot(seq.depr2, group = ward.depr2.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
# Visualizar clusters:
plot(ward.range.depr4,
stat = c("ASW","ASWw", "HG", "PBC", "HC"), norm="zscore")
# Revision de soluciones con 5 tipos
ward.depr4.5 <- stats::cutree(ward.depr4, k = 10)
seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo", margins = NA)
seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo", margin = NA)
seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
# Revision de soluciones con 5 tipos
ward.depr4.5 <- stats::cutree(ward.depr4, k = 8)
seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
# Revision de soluciones con 5 tipos
ward.depr4.5 <- stats::cutree(ward.depr4, k = 6)
seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
# Revision de soluciones con 5 tipos
ward.depr4.5 <- stats::cutree(ward.depr4, k = 7)
seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
?TraMineR::seqdist
knitr::opts_chunk$set(echo = TRUE)
substitution_cost_matrix <- as.matrix(rbind(c(0, .26, .53, 1),
c(.26, 0, .26, .74),
c(.53, .26, 0, .47),
c(1, .74, .47, 0)))
dist.depr4 <- TraMineR::seqdist(seq.depr4,
method = "OM",
sm = substitution_cost_matrix)
knitr::opts_chunk$set(echo = TRUE)
# Librerías básicas
library(tidyverse)
library(sjlabelled)
# Librerias análisis de secuencia
library(TraMineR)
library(TraMineRextras)
library(WeightedCluster)
library(cluster)
# Librería ELSOC
library(elsoc)
# Cargar datos ELSOC:
elsoc::load_elsoc(data = 'wide')
# Crear variables de sintomatología depresiva por ola:
elsoc_salud <- elsoc_wide_2016_2021 %>%
# Se conservan observaciones presentes en las 5 olas
filter(tipo_atricion == 1) %>%
# Crear variables de PHQ9
purrr::map_at(.at = vars(starts_with('s11_0')),
.f = function(s) car::recode(s, "1 = 0; 2 = 1; 3 = 2; c(4, 5) = 3; c(-888, -999) = NA")) %>%
as.data.frame() %>%
mutate(phq9_w01 = (s11_01_w01 + s11_02_w01 + s11_03_w01 + s11_04_w01 + s11_05_w01 + s11_06_w01 + s11_07_w01 + s11_08_w01 + s11_09_w01),
phq9_w02 = (s11_01_w02 + s11_02_w02 + s11_03_w02 + s11_04_w02 + s11_05_w02 + s11_06_w02 + s11_07_w02 + s11_08_w02 + s11_09_w02),
phq9_w03 = (s11_01_w03 + s11_02_w03 + s11_03_w03 + s11_04_w03 + s11_05_w03 + s11_06_w03 + s11_07_w03 + s11_08_w03 + s11_09_w03),
phq9_w04 = (s11_01_w04 + s11_02_w04 + s11_03_w04 + s11_04_w04 + s11_05_w04 + s11_06_w04 + s11_07_w04 + s11_08_w04 + s11_09_w04),
phq9_w05 = (s11_01_w05 + s11_02_w05 + s11_03_w05 + s11_04_w05 + s11_05_w05 + s11_06_w05 + s11_07_w05 + s11_08_w05 + s11_09_w05)) %>%
# Quitar NAs
filter(!is.na(phq9_w01), !is.na(phq9_w02), !is.na(phq9_w03), !is.na(phq9_w04), !is.na(phq9_w05)) %>%
# Crear indicador de depresión en 4 y en 2 categorías:
mutate(depr4_w01 = car::recode(phq9_w01, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w02 = car::recode(phq9_w02, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w03 = car::recode(phq9_w03, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w04 = car::recode(phq9_w04, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w05 = car::recode(phq9_w05, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr2_w01 = car::recode(phq9_w01, "0:9 = 0; 10:27 = 1"),
depr2_w02 = car::recode(phq9_w02, "0:9 = 0; 10:27 = 1"),
depr2_w03 = car::recode(phq9_w03, "0:9 = 0; 10:27 = 1"),
depr2_w04 = car::recode(phq9_w04, "0:9 = 0; 10:27 = 1"),
depr2_w05 = car::recode(phq9_w05, "0:9 = 0; 10:27 = 1")
)
# Crear objeto con secuencias
seq.depr4 <- TraMineR::seqdef(elsoc_salud,
var = c('depr4_w01', 'depr4_w02', 'depr4_w03', 'depr4_w04', 'depr4_w05'),
states = c('Sin síntomas', 'Síntomas medios', 'Síntomas moderados', 'Síntomas severos'),
cpal = c('lightgreen', 'mediumturquoise', 'skyblue3', 'slateblue4'))
substitution_cost_matrix <- as.matrix(rbind(c(0, .26, .53, 1),
c(.26, 0, .26, .74),
c(.53, .26, 0, .47),
c(1, .74, .47, 0)))
dist.depr4 <- TraMineR::seqdist(seq.depr4,
method = "OM",
sm = substitution_cost_matrix)
View(substitution_cost_matrix)
knitr::opts_chunk$set(echo = TRUE)
substitution_cost_matrix <- as.matrix(rbind(c(0, 5, 10, 19),
c(5, 0, 5, 14),
c(10, 5, 0, 9),
c(19, 14, 9, 0)))
dist.depr4 <- TraMineR::seqdist(seq.depr4,
method = "OM",
sm = substitution_cost_matrix)
# Construir tipos de trayectorias con analisis de cluster jerarquico Ward
ward.depr4 <- stats::hclust(as.dist(dist.depr4),
method = "ward.D")
# Comparar soluciones con diferentes numeros de trayectorias (se prueban de 1 a 15 clusters)
ward.range.depr4 <- WeightedCluster::as.clustrange(ward.depr4,
diss = dist.depr4,
ncluster = 32)
# Visualizar clusters:
plot(ward.range.depr4,
stat = c("ASW","ASWw", "HG", "PBC", "HC"), norm="zscore")
View(ward.range.depr4)
?pivot_longer()
ward.range.depr4$stats %>%
pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC))
ward.range.depr4$stats %>%
pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC),
names_to = 'indicador',
values_to = 'value')
ward.range.depr4$stats %>%
mutate(clusters = 1:31)
ward.range.depr4$stats %>%
mutate(clusters = 1:31) %>%
pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC),
names_to = 'indicador',
values_to = 'value')
ward.range.depr4$stats %>%
mutate(clusters = 1:31) %>%
pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC),
names_to = 'indicador',
values_to = 'value') %>%
ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) +
geom_line()
ward.range.depr4$stats %>%
mutate(clusters = 1:31) %>%
pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC),
names_to = 'indicador',
values_to = 'value') %>%
group_by(indicador) %>%
mutate(value = value - mean(value, na.rm = TRUE) / sd(value, na.rm = TRUE)) %>%
ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) +
geom_line()
plot(ward.range.depr4,
stat = c("ASW","ASWw", "HG", "PBC", "HC"), norm="zscore")
ward.range.depr4$stats %>%
mutate(clusters = 1:31) %>%
pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC),
names_to = 'indicador',
values_to = 'value') %>%
group_by(indicador) %>%
mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %>%
ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) +
geom_line()
plot(ward.range.depr4,
stat = c("ASW","ASWw", "HG", "PBC", "HC"), norm="zscore")
ward.range.depr4$stats %>%
mutate(clusters = 1:31) %>%
pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC),
names_to = 'indicador',
values_to = 'value') %>%
group_by(indicador) %>%
mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %>%
ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) +
geom_line()
ward.range.depr4$stats %>%
mutate(clusters = 1:31) %>%
pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC),
names_to = 'indicador',
values_to = 'value') %>%
group_by(indicador) %>%
mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %>%
ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) +
geom_line() +
scale_x_continuous(n.breaks = 8)
# Comparar soluciones con diferentes numeros de trayectorias (se prueban de 1 a 15 clusters)
ward.range.depr4 <- WeightedCluster::as.clustrange(ward.depr4,
diss = dist.depr4,
ncluster = 15)
ward.range.depr4$stats %>%
mutate(clusters = 1:15) %>%
pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC),
names_to = 'indicador',
values_to = 'value') %>%
group_by(indicador) %>%
mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %>%
ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) +
geom_line() +
scale_x_continuous(n.breaks = 8)
ward.range.depr4$stats %>%
mutate(clusters = 1:14) %>%
pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC),
names_to = 'indicador',
values_to = 'value') %>%
group_by(indicador) %>%
mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %>%
ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) +
geom_line() +
scale_x_continuous(n.breaks = 8)
ward.range.depr4$stats %>%
mutate(clusters = 1:14) %>%
pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC),
names_to = 'indicador',
values_to = 'value') %>%
group_by(indicador) %>%
mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %>%
ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) +
geom_line() +
scale_x_continuous(breaks = 1:15)
ward.range.depr4$stats %>%
mutate(clusters = 2:15) %>%
pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC),
names_to = 'indicador',
values_to = 'value') %>%
group_by(indicador) %>%
mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %>%
ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) +
geom_line() +
scale_x_continuous(breaks = 2:15)
# Revision de soluciones con 7 clusters
ward.depr4.5 <- stats::cutree(ward.depr4, k = 7)
seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
View(dist.depr4)
knitr::opts_chunk$set(echo = TRUE)
# Librerías básicas
library(tidyverse)
library(sjlabelled)
# Librerias análisis de secuencia
library(TraMineR)
library(TraMineRextras)
library(WeightedCluster)
library(cluster)
# Librería ELSOC
library(elsoc)
# Cargar datos ELSOC:
elsoc::load_elsoc(data = 'wide')
# Crear variables de sintomatología depresiva por ola:
elsoc_salud <- elsoc_wide_2016_2021 %>%
# Se conservan observaciones presentes en las 5 olas
filter(tipo_atricion == 1) %>%
# Crear variables de PHQ9
purrr::map_at(.at = vars(starts_with('s11_0')),
.f = function(s) car::recode(s, "1 = 0; 2 = 1; 3 = 2; c(4, 5) = 3; c(-888, -999) = NA")) %>%
as.data.frame() %>%
mutate(phq9_w01 = (s11_01_w01 + s11_02_w01 + s11_03_w01 + s11_04_w01 + s11_05_w01 + s11_06_w01 + s11_07_w01 + s11_08_w01 + s11_09_w01),
phq9_w02 = (s11_01_w02 + s11_02_w02 + s11_03_w02 + s11_04_w02 + s11_05_w02 + s11_06_w02 + s11_07_w02 + s11_08_w02 + s11_09_w02),
phq9_w03 = (s11_01_w03 + s11_02_w03 + s11_03_w03 + s11_04_w03 + s11_05_w03 + s11_06_w03 + s11_07_w03 + s11_08_w03 + s11_09_w03),
phq9_w04 = (s11_01_w04 + s11_02_w04 + s11_03_w04 + s11_04_w04 + s11_05_w04 + s11_06_w04 + s11_07_w04 + s11_08_w04 + s11_09_w04),
phq9_w05 = (s11_01_w05 + s11_02_w05 + s11_03_w05 + s11_04_w05 + s11_05_w05 + s11_06_w05 + s11_07_w05 + s11_08_w05 + s11_09_w05)) %>%
# Quitar NAs
filter(!is.na(phq9_w01), !is.na(phq9_w02), !is.na(phq9_w03), !is.na(phq9_w04), !is.na(phq9_w05)) %>%
# Crear indicador de depresión en 4 y en 2 categorías:
mutate(depr4_w01 = car::recode(phq9_w01, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w02 = car::recode(phq9_w02, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w03 = car::recode(phq9_w03, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w04 = car::recode(phq9_w04, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr4_w05 = car::recode(phq9_w05, "0:4 = 1; 5:9 = 2; 10:14 = 3; 15:27 = 4"),
depr2_w01 = car::recode(phq9_w01, "0:9 = 0; 10:27 = 1"),
depr2_w02 = car::recode(phq9_w02, "0:9 = 0; 10:27 = 1"),
depr2_w03 = car::recode(phq9_w03, "0:9 = 0; 10:27 = 1"),
depr2_w04 = car::recode(phq9_w04, "0:9 = 0; 10:27 = 1"),
depr2_w05 = car::recode(phq9_w05, "0:9 = 0; 10:27 = 1")
)
# Crear objeto con secuencias
seq.depr4 <- TraMineR::seqdef(elsoc_salud,
var = c('depr4_w01', 'depr4_w02', 'depr4_w03', 'depr4_w04', 'depr4_w05'),
states = c('Sin síntomas', 'Síntomas medios', 'Síntomas moderados', 'Síntomas severos'),
cpal = c('lightgreen', 'mediumturquoise', 'skyblue3', 'slateblue4'))
# Medir distancias entre secuencias usando analisis de secuencias usando optimal matching analysis
substitution_cost_matrix <- as.matrix(rbind(c(0, 5, 10, 19),
c(5, 0, 5, 14),
c(10, 5, 0, 9),
c(19, 14, 9, 0)))
dist.depr4 <- TraMineR::seqdist(seq.depr4,
method = "OM",
sm = substitution_cost_matrix)
# Construir tipos de trayectorias con analisis de cluster jerarquico Ward
ward.depr4 <- stats::hclust(as.dist(dist.depr4),
method = "ward.D")
# Comparar soluciones con diferentes numeros de trayectorias (se prueban de 1 a 15 clusters)
ward.range.depr4 <- WeightedCluster::as.clustrange(ward.depr4,
diss = dist.depr4,
ncluster = 15)
# Visualizar clusters:
ward.range.depr4$stats %>%
mutate(clusters = 2:15) %>%
pivot_longer(cols = c(ASW, ASWw, HG, PBC, HC),
names_to = 'indicador',
values_to = 'value') %>%
group_by(indicador) %>%
mutate(value = (value - mean(value, na.rm = TRUE)) / sd(value, na.rm = TRUE)) %>%
ggplot(aes(y = value, x = clusters, color = indicador, group = indicador)) +
geom_line() +
scale_x_continuous(breaks = 2:15)
# Revision de soluciones con 7 clusters
ward.depr4.5 <- stats::cutree(ward.depr4, k = 7)
seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
seqIplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), sortv = "from.start", xlab = "Tiempo")
seqmtplot(seq.depr4, group = ward.depr4.5, xlab = "Estatus")
seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
View(dist.depr4)
asd <- seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
View(asd)
seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
?seqdplot
# Revision de soluciones con 7 clusters
ward.depr4.5 <- stats::cutree(ward.depr4, k = 7)
seqdplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), xlab = "Tiempo")
seqIplot(seq.depr4, group = ward.depr4.5, xtlab = c(2016:2019, 2021), sortv = "from.start", xlab = "Tiempo")
seqmtplot(seq.depr4, group = ward.depr4.5, xlab = "Estatus")
